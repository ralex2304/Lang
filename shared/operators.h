#ifndef DEF_OPER
static_assert(0 && "DEF_OPER is not defined");
#endif //< #ifndef DEF_OPER

//     NUM | NAME | TYPE |
DEF_OPER(1,  CMD_SEPARATOR,   LIST)
DEF_OPER(2,  VAR_DEFINITION,  BINARY)
DEF_OPER(3,  CONST_VAR_DEF,   UNARY)
DEF_OPER(4,  FUNC_DEFINITION, BINARY)
DEF_OPER(5,  ASSIGNMENT,      BINARY)
DEF_OPER(6,  ASSIGNMENT_ADD,  BINARY)
DEF_OPER(7,  ASSIGNMENT_SUB,  BINARY)
DEF_OPER(8,  ASSIGNMENT_MUL,  BINARY)
DEF_OPER(9,  ASSIGNMENT_DIV,  BINARY)

DEF_OPER(10, RETURN,          UNARY)

DEF_OPER(15, VAR_SEPARATOR,   LIST)

DEF_OPER(16, FUNC_CALL,       BINARY)

DEF_OPER(20, MATH_ADD,        BINARY)
DEF_OPER(21, MATH_SUB,        BINARY)
DEF_OPER(22, MATH_MUL,        BINARY)
DEF_OPER(23, MATH_DIV,        BINARY)
DEF_OPER(24, MATH_SQRT,       UNARY)
DEF_OPER(25, MATH_SIN,        UNARY)
DEF_OPER(26, MATH_COS,        UNARY)
DEF_OPER(27, MATH_NEGATIVE,   UNARY)
DEF_OPER(28, MATH_DIFF,       BINARY)

DEF_OPER(30, LOGIC_GREAT,     BINARY)
DEF_OPER(31, LOGIC_LOWER,     BINARY)
DEF_OPER(32, LOGIC_NOT_EQUAL, BINARY)
DEF_OPER(33, LOGIC_EQUAL,     BINARY)
DEF_OPER(34, LOGIC_GREAT_EQ,  BINARY)
DEF_OPER(35, LOGIC_LOWER_EQ,  BINARY)

DEF_OPER(40, PREFIX_ADD,      UNARY)
DEF_OPER(41, PREFIX_SUB,      UNARY)
DEF_OPER(42, POSTFIX_ADD,     UNARY)
DEF_OPER(43, POSTFIX_SUB,     UNARY)

DEF_OPER(50, WHILE,           BINARY)
DEF_OPER(51, DO_WHILE,        BINARY)
DEF_OPER(53, IF,              BINARY)
DEF_OPER(54, DO_IF,           BINARY)
DEF_OPER(56, ELSE,            BINARY)
DEF_OPER(57, BREAK,           LEAF)
DEF_OPER(58, CONTINUE,        LEAF)

DEF_OPER(70, IN,              LEAF)
DEF_OPER(71, OUT,             LEAF)
DEF_OPER(72, SHOW,            LEAF)
DEF_OPER(73, SET_FPS,         UNARY)
