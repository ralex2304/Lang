     1                                  ; Program start
     2                                  
     3                                  section .text
     4                                  
     5                                  extern printf
     6                                  extern scanf
     7                                  global _start
     8                                  
     9                                  _start:
    10 00000000 C8000000                        enter 0, 0
    11                                          ; func call: остров_в_океане
    12 00000004 E80D000000                      call ___func_0
    13                                          ; func call end
    14                                  
    15 00000009 C9                              leave
    16 0000000A B83C000000                      mov rax, 0x3c
    17 0000000F F2480F2CF8                      cvttsd2si rdi, xmm0
    18 00000014 0F05                            syscall
    19                                  
    20                                  ; =========================== Function definition =========================
    21                                  ; func name: остров_в_океане
    22                                  ___func_0:
    23 00000016 C8180000                        enter 0x0018, 0; this place is patched in the end of function definition
    24                                  
    25 0000001A E8A5070000                      call doubleio_in
    26 0000001F 4883EC08                        sub rsp, 8
    27 00000023 F20F110424                      movsd [rsp], xmm0
    28                                  
    29                                          ; var assignment: А
    30 00000028 8F45F8                          pop qword [rbp - 8 - 0]
    31                                  
    32 0000002B E894070000                      call doubleio_in
    33 00000030 4883EC08                        sub rsp, 8
    34 00000034 F20F110424                      movsd [rsp], xmm0
    35                                  
    36                                          ; var assignment: Б
    37 00000039 8F45F0                          pop qword [rbp - 8 - 8]
    38                                  
    39 0000003C E883070000                      call doubleio_in
    40 00000041 4883EC08                        sub rsp, 8
    41 00000045 F20F110424                      movsd [rsp], xmm0
    42                                  
    43                                          ; var assignment: В
    44 0000004A 8F45E8                          pop qword [rbp - 8 - 16]
    45                                  
    46 0000004D FF75F8                          push qword [rbp - 8 - 0]
    47 00000050 8F4424E8                        pop qword [rsp - 8 - 16 - 0]
    48                                  
    49 00000054 FF75F0                          push qword [rbp - 8 - 8]
    50 00000057 8F4424E0                        pop qword [rsp - 8 - 16 - 8]
    51                                  
    52 0000005B FF75E8                          push qword [rbp - 8 - 16]
    53 0000005E 8F4424D8                        pop qword [rsp - 8 - 16 - 16]
    54                                  
    55                                          ; func call: квадратка
    56 00000062 E816000000                      call ___func_4
    57                                          ; func call end
    58                                  
    59 00000067 4883EC08                        sub rsp, 8
    60 0000006B F20F110424                      movsd [rsp], xmm0
    61                                  
    62 00000070 F20F100424                      movsd xmm0, [rsp]
    63 00000075 4883C408                        add rsp, 8
    64 00000079 C9                              leave
    65 0000007A C3                              ret
    66                                  
    67 0000007B C9                              leave
    68 0000007C C3                              ret
    69                                  ; ------------------------- Function definition end -----------------------
    70                                  
    71                                  
    72                                  ; =========================== Function definition =========================
    73                                  ; func name: квадратка
    74                                  ___func_4:
    75 0000007D C8200000                        enter 0x0020, 0; this place is patched in the end of function definition
    76                                  
    77 00000081 FF75F8                          push qword [rbp - 8 - 0]
    78 00000084 4883EC08                        sub rsp, 8
    79 00000088 BA00000000                      mov rdx, 0x0
    80 0000008D 48891424                        mov qword [rsp], rdx
    81                                          ; operands comparison: op1 == op2
    82 00000091 F20F101424                      movsd xmm2, [rsp]
    83 00000096 F20F104C2408                    movsd xmm1, [rsp + 8]
    84 0000009C 4883C408                        add rsp, 8
    85 000000A0 F20F10D9                        movsd xmm3, xmm1
    86 000000A4 F20F5CDA                        subsd xmm3, xmm2
    87 000000A8 F20F111C24                      movsd [rsp], xmm3
    88 000000AD 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
    88 000000B6 7F                 
    89 000000B7 48211424                        and qword [rsp], rdx
    90 000000BB F20F101C24                      movsd xmm3, [rsp]
    91 000000C0 4883EC08                        sub rsp, 8
    92 000000C4 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
    92 000000CD 3E                 
    93 000000CE 48891424                        mov qword [rsp], rdx
    94 000000D2 F20F102424                      movsd xmm4, [rsp]
    95 000000D7 4883C408                        add rsp, 8
    96                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
    97                                  
    98 000000DB 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
    99 000000DF 7314                            jnc ___compare_1_false
   100                                  
   101 000000E1 4883EC08                        sub rsp, 8
   102 000000E5 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   102 000000EE 3F                 
   103 000000EF 48891424                        mov qword [rsp], rdx
   104 000000F3 EB0D                            jmp ___compare_1_end
   105                                  
   106                                  ___compare_1_false:
   107 000000F5 4883EC08                        sub rsp, 8
   108 000000F9 BA00000000                      mov rdx, 0x0
   109 000000FE 48891424                        mov qword [rsp], rdx
   110                                  ___compare_1_end:
   111                                  
   112                                          ; if begin
   113 00000102 4883EC08                        sub rsp, 8
   114 00000106 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   114 0000010F 3E                 
   115 00000110 48891424                        mov qword [rsp], rdx
   116 00000114 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   116 0000011D 7F                 
   117 0000011E 4821542408                      and qword [rsp + 8], rdx
   118 00000123 F20F104C2408                    movsd xmm1, [rsp + 8]
   119 00000129 F20F101424                      movsd xmm2, [rsp]
   120 0000012E 4883C410                        add rsp, 16
   121 00000132 660F2FCA                        comisd xmm1, xmm2
   122 00000136 7227                            jc ___if_5_end
   123 00000138 FF75F0                          push qword [rbp - 8 - 8]
   124 0000013B 8F4424E8                        pop qword [rsp - 8 - 16 - 0]
   125                                  
   126 0000013F FF75E8                          push qword [rbp - 8 - 16]
   127 00000142 8F4424E0                        pop qword [rsp - 8 - 16 - 8]
   128                                  
   129                                          ; func call: не_квадратка
   130 00000146 E824040000                      call ___func_5
   131                                          ; func call end
   132                                  
   133 0000014B 4883EC08                        sub rsp, 8
   134 0000014F F20F110424                      movsd [rsp], xmm0
   135                                  
   136 00000154 F20F100424                      movsd xmm0, [rsp]
   137 00000159 4883C408                        add rsp, 8
   138 0000015D C9                              leave
   139 0000015E C3                              ret
   140                                  
   141                                  ___if_5_end:
   142                                          ; if end
   143                                  
   144 0000015F FF75F0                          push qword [rbp - 8 - 8]
   145 00000162 FF75F0                          push qword [rbp - 8 - 8]
   146 00000165 F20F101424                      movsd xmm2, [rsp]
   147 0000016A F20F104C2408                    movsd xmm1, [rsp + 8]
   148 00000170 4883C408                        add rsp, 8
   149 00000174 F20F59CA                        mulsd xmm1, xmm2
   150 00000178 F20F110C24                      movsd [rsp], xmm1
   151                                  
   152 0000017D 4883EC08                        sub rsp, 8
   153 00000181 48BA00000000000010-             mov rdx, 0x4010000000000000
   153 0000018A 40                 
   154 0000018B 48891424                        mov qword [rsp], rdx
   155 0000018F FF75F8                          push qword [rbp - 8 - 0]
   156 00000192 FF75E8                          push qword [rbp - 8 - 16]
   157 00000195 F20F101424                      movsd xmm2, [rsp]
   158 0000019A F20F104C2408                    movsd xmm1, [rsp + 8]
   159 000001A0 4883C408                        add rsp, 8
   160 000001A4 F20F59CA                        mulsd xmm1, xmm2
   161 000001A8 F20F110C24                      movsd [rsp], xmm1
   162                                  
   163 000001AD F20F101424                      movsd xmm2, [rsp]
   164 000001B2 F20F104C2408                    movsd xmm1, [rsp + 8]
   165 000001B8 4883C408                        add rsp, 8
   166 000001BC F20F59CA                        mulsd xmm1, xmm2
   167 000001C0 F20F110C24                      movsd [rsp], xmm1
   168                                  
   169 000001C5 F20F101424                      movsd xmm2, [rsp]
   170 000001CA F20F104C2408                    movsd xmm1, [rsp + 8]
   171 000001D0 4883C408                        add rsp, 8
   172 000001D4 F20F5CCA                        subsd xmm1, xmm2
   173 000001D8 F20F110C24                      movsd [rsp], xmm1
   174                                  
   175                                          ; var assignment: дискр
   176 000001DD 8F45E0                          pop qword [rbp - 8 - 24]
   177                                  
   178 000001E0 FF75E0                          push qword [rbp - 8 - 24]
   179 000001E3 4883EC08                        sub rsp, 8
   180 000001E7 BA00000000                      mov rdx, 0x0
   181 000001EC 48891424                        mov qword [rsp], rdx
   182                                          ; operands comparison: op1 < op2
   183 000001F0 F20F101424                      movsd xmm2, [rsp]
   184 000001F5 F20F104C2408                    movsd xmm1, [rsp + 8]
   185 000001FB 4883C408                        add rsp, 8
   186 000001FF F20F10D9                        movsd xmm3, xmm1
   187 00000203 F20F5CDA                        subsd xmm3, xmm2
   188 00000207 F20F111C24                      movsd [rsp], xmm3
   189 0000020C 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   189 00000215 7F                 
   190 00000216 48211424                        and qword [rsp], rdx
   191 0000021A F20F101C24                      movsd xmm3, [rsp]
   192 0000021F 4883EC08                        sub rsp, 8
   193 00000223 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   193 0000022C 3E                 
   194 0000022D 48891424                        mov qword [rsp], rdx
   195 00000231 F20F102424                      movsd xmm4, [rsp]
   196 00000236 4883C408                        add rsp, 8
   197                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
   198                                  
   199 0000023A 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
   200 0000023E 721A                            jc ___compare_2_false
   201                                  
   202 00000240 660F2FCA                        comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
   203 00000244 7314                            jnc ___compare_2_false
   204                                  
   205 00000246 4883EC08                        sub rsp, 8
   206 0000024A 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   206 00000253 3F                 
   207 00000254 48891424                        mov qword [rsp], rdx
   208 00000258 EB0D                            jmp ___compare_2_end
   209                                  
   210                                  ___compare_2_false:
   211 0000025A 4883EC08                        sub rsp, 8
   212 0000025E BA00000000                      mov rdx, 0x0
   213 00000263 48891424                        mov qword [rsp], rdx
   214                                  ___compare_2_end:
   215                                  
   216                                          ; if begin
   217 00000267 4883EC08                        sub rsp, 8
   218 0000026B 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   218 00000274 3E                 
   219 00000275 48891424                        mov qword [rsp], rdx
   220 00000279 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   220 00000282 7F                 
   221 00000283 4821542408                      and qword [rsp + 8], rdx
   222 00000288 F20F104C2408                    movsd xmm1, [rsp + 8]
   223 0000028E F20F101424                      movsd xmm2, [rsp]
   224 00000293 4883C410                        add rsp, 16
   225 00000297 660F2FCA                        comisd xmm1, xmm2
   226 0000029B 7233                            jc ___if_6_end
   227 0000029D 4883EC08                        sub rsp, 8
   228 000002A1 BA00000000                      mov rdx, 0x0
   229 000002A6 48891424                        mov qword [rsp], rdx
   230 000002AA F20F100424                      movsd xmm0, [rsp]
   231 000002AF 4883C408                        add rsp, 8
   232 000002B3 E87F060000                      call doubleio_out
   233                                  
   234 000002B8 4883EC08                        sub rsp, 8
   235 000002BC BA00000000                      mov rdx, 0x0
   236 000002C1 48891424                        mov qword [rsp], rdx
   237 000002C5 F20F100424                      movsd xmm0, [rsp]
   238 000002CA 4883C408                        add rsp, 8
   239 000002CE C9                              leave
   240 000002CF C3                              ret
   241                                  
   242                                  ___if_6_end:
   243                                          ; if end
   244                                  
   245 000002D0 FF75E0                          push qword [rbp - 8 - 24]
   246 000002D3 4883EC08                        sub rsp, 8
   247 000002D7 BA00000000                      mov rdx, 0x0
   248 000002DC 48891424                        mov qword [rsp], rdx
   249                                          ; operands comparison: op1 == op2
   250 000002E0 F20F101424                      movsd xmm2, [rsp]
   251 000002E5 F20F104C2408                    movsd xmm1, [rsp + 8]
   252 000002EB 4883C408                        add rsp, 8
   253 000002EF F20F10D9                        movsd xmm3, xmm1
   254 000002F3 F20F5CDA                        subsd xmm3, xmm2
   255 000002F7 F20F111C24                      movsd [rsp], xmm3
   256 000002FC 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   256 00000305 7F                 
   257 00000306 48211424                        and qword [rsp], rdx
   258 0000030A F20F101C24                      movsd xmm3, [rsp]
   259 0000030F 4883EC08                        sub rsp, 8
   260 00000313 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   260 0000031C 3E                 
   261 0000031D 48891424                        mov qword [rsp], rdx
   262 00000321 F20F102424                      movsd xmm4, [rsp]
   263 00000326 4883C408                        add rsp, 8
   264                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
   265                                  
   266 0000032A 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
   267 0000032E 7314                            jnc ___compare_3_false
   268                                  
   269 00000330 4883EC08                        sub rsp, 8
   270 00000334 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   270 0000033D 3F                 
   271 0000033E 48891424                        mov qword [rsp], rdx
   272 00000342 EB0D                            jmp ___compare_3_end
   273                                  
   274                                  ___compare_3_false:
   275 00000344 4883EC08                        sub rsp, 8
   276 00000348 BA00000000                      mov rdx, 0x0
   277 0000034D 48891424                        mov qword [rsp], rdx
   278                                  ___compare_3_end:
   279                                  
   280                                          ; if begin
   281 00000351 4883EC08                        sub rsp, 8
   282 00000355 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   282 0000035E 3E                 
   283 0000035F 48891424                        mov qword [rsp], rdx
   284 00000363 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   284 0000036C 7F                 
   285 0000036D 4821542408                      and qword [rsp + 8], rdx
   286 00000372 F20F104C2408                    movsd xmm1, [rsp + 8]
   287 00000378 F20F101424                      movsd xmm2, [rsp]
   288 0000037D 4883C410                        add rsp, 16
   289 00000381 660F2FCA                        comisd xmm1, xmm2
   290 00000385 0F829C000000                    jc ___if_7_end
   291 0000038B 4883EC08                        sub rsp, 8
   292 0000038F 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   292 00000398 3F                 
   293 00000399 48891424                        mov qword [rsp], rdx
   294 0000039D F20F100424                      movsd xmm0, [rsp]
   295 000003A2 4883C408                        add rsp, 8
   296 000003A6 E88C050000                      call doubleio_out
   297                                  
   298 000003AB FF75F0                          push qword [rbp - 8 - 8]
   299 000003AE 48BA00000000000000-             mov rdx, 1 << 63
   299 000003B7 80                 
   300 000003B8 48311424                        xor qword [rsp], rdx
   301 000003BC 4883EC08                        sub rsp, 8
   302 000003C0 48BA00000000000000-             mov rdx, 0x4000000000000000
   302 000003C9 40                 
   303 000003CA 48891424                        mov qword [rsp], rdx
   304 000003CE FF75F8                          push qword [rbp - 8 - 0]
   305 000003D1 F20F101424                      movsd xmm2, [rsp]
   306 000003D6 F20F104C2408                    movsd xmm1, [rsp + 8]
   307 000003DC 4883C408                        add rsp, 8
   308 000003E0 F20F59CA                        mulsd xmm1, xmm2
   309 000003E4 F20F110C24                      movsd [rsp], xmm1
   310                                  
   311 000003E9 F20F101424                      movsd xmm2, [rsp]
   312 000003EE F20F104C2408                    movsd xmm1, [rsp + 8]
   313 000003F4 4883C408                        add rsp, 8
   314 000003F8 F20F5ECA                        divsd xmm1, xmm2
   315 000003FC F20F110C24                      movsd [rsp], xmm1
   316                                  
   317 00000401 F20F100424                      movsd xmm0, [rsp]
   318 00000406 4883C408                        add rsp, 8
   319 0000040A E828050000                      call doubleio_out
   320                                  
   321 0000040F 4883EC08                        sub rsp, 8
   322 00000413 BA00000000                      mov rdx, 0x0
   323 00000418 48891424                        mov qword [rsp], rdx
   324 0000041C F20F100424                      movsd xmm0, [rsp]
   325 00000421 4883C408                        add rsp, 8
   326 00000425 C9                              leave
   327 00000426 C3                              ret
   328                                  
   329                                  ___if_7_end:
   330                                          ; if end
   331                                  
   332 00000427 FF75E0                          push qword [rbp - 8 - 24]
   333 0000042A F20F510C24                      sqrtsd xmm1 , [rsp]
   334 0000042F F20F110C24                      movsd [rsp], xmm1
   335                                          ; var assignment: дискр
   336 00000434 8F45E0                          pop qword [rbp - 8 - 24]
   337                                  
   338 00000437 4883EC08                        sub rsp, 8
   339 0000043B 48BA00000000000000-             mov rdx, 0x4000000000000000
   339 00000444 40                 
   340 00000445 48891424                        mov qword [rsp], rdx
   341 00000449 F20F100424                      movsd xmm0, [rsp]
   342 0000044E 4883C408                        add rsp, 8
   343 00000452 E8E0040000                      call doubleio_out
   344                                  
   345 00000457 FF75F0                          push qword [rbp - 8 - 8]
   346 0000045A 48BA00000000000000-             mov rdx, 1 << 63
   346 00000463 80                 
   347 00000464 48311424                        xor qword [rsp], rdx
   348 00000468 FF75E0                          push qword [rbp - 8 - 24]
   349 0000046B F20F101424                      movsd xmm2, [rsp]
   350 00000470 F20F104C2408                    movsd xmm1, [rsp + 8]
   351 00000476 4883C408                        add rsp, 8
   352 0000047A F20F5CCA                        subsd xmm1, xmm2
   353 0000047E F20F110C24                      movsd [rsp], xmm1
   354                                  
   355 00000483 4883EC08                        sub rsp, 8
   356 00000487 48BA00000000000000-             mov rdx, 0x4000000000000000
   356 00000490 40                 
   357 00000491 48891424                        mov qword [rsp], rdx
   358 00000495 FF75F8                          push qword [rbp - 8 - 0]
   359 00000498 F20F101424                      movsd xmm2, [rsp]
   360 0000049D F20F104C2408                    movsd xmm1, [rsp + 8]
   361 000004A3 4883C408                        add rsp, 8
   362 000004A7 F20F59CA                        mulsd xmm1, xmm2
   363 000004AB F20F110C24                      movsd [rsp], xmm1
   364                                  
   365 000004B0 F20F101424                      movsd xmm2, [rsp]
   366 000004B5 F20F104C2408                    movsd xmm1, [rsp + 8]
   367 000004BB 4883C408                        add rsp, 8
   368 000004BF F20F5ECA                        divsd xmm1, xmm2
   369 000004C3 F20F110C24                      movsd [rsp], xmm1
   370                                  
   371 000004C8 F20F100424                      movsd xmm0, [rsp]
   372 000004CD 4883C408                        add rsp, 8
   373 000004D1 E861040000                      call doubleio_out
   374                                  
   375 000004D6 FF75F0                          push qword [rbp - 8 - 8]
   376 000004D9 48BA00000000000000-             mov rdx, 1 << 63
   376 000004E2 80                 
   377 000004E3 48311424                        xor qword [rsp], rdx
   378 000004E7 FF75E0                          push qword [rbp - 8 - 24]
   379 000004EA F20F101424                      movsd xmm2, [rsp]
   380 000004EF F20F104C2408                    movsd xmm1, [rsp + 8]
   381 000004F5 4883C408                        add rsp, 8
   382 000004F9 F20F58CA                        addsd xmm1, xmm2
   383 000004FD F20F110C24                      movsd [rsp], xmm1
   384                                  
   385 00000502 4883EC08                        sub rsp, 8
   386 00000506 48BA00000000000000-             mov rdx, 0x4000000000000000
   386 0000050F 40                 
   387 00000510 48891424                        mov qword [rsp], rdx
   388 00000514 FF75F8                          push qword [rbp - 8 - 0]
   389 00000517 F20F101424                      movsd xmm2, [rsp]
   390 0000051C F20F104C2408                    movsd xmm1, [rsp + 8]
   391 00000522 4883C408                        add rsp, 8
   392 00000526 F20F59CA                        mulsd xmm1, xmm2
   393 0000052A F20F110C24                      movsd [rsp], xmm1
   394                                  
   395 0000052F F20F101424                      movsd xmm2, [rsp]
   396 00000534 F20F104C2408                    movsd xmm1, [rsp + 8]
   397 0000053A 4883C408                        add rsp, 8
   398 0000053E F20F5ECA                        divsd xmm1, xmm2
   399 00000542 F20F110C24                      movsd [rsp], xmm1
   400                                  
   401 00000547 F20F100424                      movsd xmm0, [rsp]
   402 0000054C 4883C408                        add rsp, 8
   403 00000550 E8E2030000                      call doubleio_out
   404                                  
   405 00000555 4883EC08                        sub rsp, 8
   406 00000559 BA00000000                      mov rdx, 0x0
   407 0000055E 48891424                        mov qword [rsp], rdx
   408 00000562 F20F100424                      movsd xmm0, [rsp]
   409 00000567 4883C408                        add rsp, 8
   410 0000056B C9                              leave
   411 0000056C C3                              ret
   412                                  
   413 0000056D C9                              leave
   414 0000056E C3                              ret
   415                                  ; ------------------------- Function definition end -----------------------
   416                                  
   417                                  
   418                                  ; =========================== Function definition =========================
   419                                  ; func name: не_квадратка
   420                                  ___func_5:
   421 0000056F C8100000                        enter 0x0010, 0; this place is patched in the end of function definition
   422                                  
   423 00000573 FF75F8                          push qword [rbp - 8 - 0]
   424 00000576 4883EC08                        sub rsp, 8
   425 0000057A BA00000000                      mov rdx, 0x0
   426 0000057F 48891424                        mov qword [rsp], rdx
   427                                          ; operands comparison: op1 == op2
   428 00000583 F20F101424                      movsd xmm2, [rsp]
   429 00000588 F20F104C2408                    movsd xmm1, [rsp + 8]
   430 0000058E 4883C408                        add rsp, 8
   431 00000592 F20F10D9                        movsd xmm3, xmm1
   432 00000596 F20F5CDA                        subsd xmm3, xmm2
   433 0000059A F20F111C24                      movsd [rsp], xmm3
   434 0000059F 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   434 000005A8 7F                 
   435 000005A9 48211424                        and qword [rsp], rdx
   436 000005AD F20F101C24                      movsd xmm3, [rsp]
   437 000005B2 4883EC08                        sub rsp, 8
   438 000005B6 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   438 000005BF 3E                 
   439 000005C0 48891424                        mov qword [rsp], rdx
   440 000005C4 F20F102424                      movsd xmm4, [rsp]
   441 000005C9 4883C408                        add rsp, 8
   442                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
   443                                  
   444 000005CD 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
   445 000005D1 7314                            jnc ___compare_4_false
   446                                  
   447 000005D3 4883EC08                        sub rsp, 8
   448 000005D7 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   448 000005E0 3F                 
   449 000005E1 48891424                        mov qword [rsp], rdx
   450 000005E5 EB0D                            jmp ___compare_4_end
   451                                  
   452                                  ___compare_4_false:
   453 000005E7 4883EC08                        sub rsp, 8
   454 000005EB BA00000000                      mov rdx, 0x0
   455 000005F0 48891424                        mov qword [rsp], rdx
   456                                  ___compare_4_end:
   457                                  
   458                                          ; if begin
   459 000005F4 4883EC08                        sub rsp, 8
   460 000005F8 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   460 00000601 3E                 
   461 00000602 48891424                        mov qword [rsp], rdx
   462 00000606 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   462 0000060F 7F                 
   463 00000610 4821542408                      and qword [rsp + 8], rdx
   464 00000615 F20F104C2408                    movsd xmm1, [rsp + 8]
   465 0000061B F20F101424                      movsd xmm2, [rsp]
   466 00000620 4883C410                        add rsp, 16
   467 00000624 660F2FCA                        comisd xmm1, xmm2
   468 00000628 0F8222010000                    jc ___if_10_end
   469 0000062E FF75F0                          push qword [rbp - 8 - 8]
   470 00000631 4883EC08                        sub rsp, 8
   471 00000635 BA00000000                      mov rdx, 0x0
   472 0000063A 48891424                        mov qword [rsp], rdx
   473                                          ; operands comparison: op1 == op2
   474 0000063E F20F101424                      movsd xmm2, [rsp]
   475 00000643 F20F104C2408                    movsd xmm1, [rsp + 8]
   476 00000649 4883C408                        add rsp, 8
   477 0000064D F20F10D9                        movsd xmm3, xmm1
   478 00000651 F20F5CDA                        subsd xmm3, xmm2
   479 00000655 F20F111C24                      movsd [rsp], xmm3
   480 0000065A 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   480 00000663 7F                 
   481 00000664 48211424                        and qword [rsp], rdx
   482 00000668 F20F101C24                      movsd xmm3, [rsp]
   483 0000066D 4883EC08                        sub rsp, 8
   484 00000671 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   484 0000067A 3E                 
   485 0000067B 48891424                        mov qword [rsp], rdx
   486 0000067F F20F102424                      movsd xmm4, [rsp]
   487 00000684 4883C408                        add rsp, 8
   488                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
   489                                  
   490 00000688 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
   491 0000068C 7314                            jnc ___compare_5_false
   492                                  
   493 0000068E 4883EC08                        sub rsp, 8
   494 00000692 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   494 0000069B 3F                 
   495 0000069C 48891424                        mov qword [rsp], rdx
   496 000006A0 EB0D                            jmp ___compare_5_end
   497                                  
   498                                  ___compare_5_false:
   499 000006A2 4883EC08                        sub rsp, 8
   500 000006A6 BA00000000                      mov rdx, 0x0
   501 000006AB 48891424                        mov qword [rsp], rdx
   502                                  ___compare_5_end:
   503                                  
   504                                          ; if begin
   505 000006AF 4883EC08                        sub rsp, 8
   506 000006B3 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   506 000006BC 3E                 
   507 000006BD 48891424                        mov qword [rsp], rdx
   508 000006C1 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   508 000006CA 7F                 
   509 000006CB 4821542408                      and qword [rsp + 8], rdx
   510 000006D0 F20F104C2408                    movsd xmm1, [rsp + 8]
   511 000006D6 F20F101424                      movsd xmm2, [rsp]
   512 000006DB 4883C410                        add rsp, 16
   513 000006DF 660F2FCA                        comisd xmm1, xmm2
   514 000006E3 7238                            jc ___if_11_end
   515 000006E5 4883EC08                        sub rsp, 8
   516 000006E9 48BA000000000000F0-             mov rdx, 0xbff0000000000000
   516 000006F2 BF                 
   517 000006F3 48891424                        mov qword [rsp], rdx
   518 000006F7 F20F100424                      movsd xmm0, [rsp]
   519 000006FC 4883C408                        add rsp, 8
   520 00000700 E832020000                      call doubleio_out
   521                                  
   522 00000705 4883EC08                        sub rsp, 8
   523 00000709 BA00000000                      mov rdx, 0x0
   524 0000070E 48891424                        mov qword [rsp], rdx
   525 00000712 F20F100424                      movsd xmm0, [rsp]
   526 00000717 4883C408                        add rsp, 8
   527 0000071B C9                              leave
   528 0000071C C3                              ret
   529                                  
   530                                  ___if_11_end:
   531                                          ; if end
   532                                  
   533 0000071D 4883EC08                        sub rsp, 8
   534 00000721 BA00000000                      mov rdx, 0x0
   535 00000726 48891424                        mov qword [rsp], rdx
   536 0000072A F20F100424                      movsd xmm0, [rsp]
   537 0000072F 4883C408                        add rsp, 8
   538 00000733 E8FF010000                      call doubleio_out
   539                                  
   540 00000738 4883EC08                        sub rsp, 8
   541 0000073C BA00000000                      mov rdx, 0x0
   542 00000741 48891424                        mov qword [rsp], rdx
   543 00000745 F20F100424                      movsd xmm0, [rsp]
   544 0000074A 4883C408                        add rsp, 8
   545 0000074E C9                              leave
   546 0000074F C3                              ret
   547                                  
   548                                  ___if_10_end:
   549                                          ; if end
   550                                  
   551 00000750 4883EC08                        sub rsp, 8
   552 00000754 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   552 0000075D 3F                 
   553 0000075E 48891424                        mov qword [rsp], rdx
   554 00000762 F20F100424                      movsd xmm0, [rsp]
   555 00000767 4883C408                        add rsp, 8
   556 0000076B E8C7010000                      call doubleio_out
   557                                  
   558 00000770 FF75F0                          push qword [rbp - 8 - 8]
   559 00000773 48BA00000000000000-             mov rdx, 1 << 63
   559 0000077C 80                 
   560 0000077D 48311424                        xor qword [rsp], rdx
   561 00000781 FF75F8                          push qword [rbp - 8 - 0]
   562 00000784 F20F101424                      movsd xmm2, [rsp]
   563 00000789 F20F104C2408                    movsd xmm1, [rsp + 8]
   564 0000078F 4883C408                        add rsp, 8
   565 00000793 F20F5ECA                        divsd xmm1, xmm2
   566 00000797 F20F110C24                      movsd [rsp], xmm1
   567                                  
   568 0000079C F20F100424                      movsd xmm0, [rsp]
   569 000007A1 4883C408                        add rsp, 8
   570 000007A5 E88D010000                      call doubleio_out
   571                                  
   572 000007AA 4883EC08                        sub rsp, 8
   573 000007AE BA00000000                      mov rdx, 0x0
   574 000007B3 48891424                        mov qword [rsp], rdx
   575 000007B7 F20F100424                      movsd xmm0, [rsp]
   576 000007BC 4883C408                        add rsp, 8
   577 000007C0 C9                              leave
   578 000007C1 C3                              ret
   579                                  
   580 000007C2 C9                              leave
   581 000007C3 C3                              ret
   582                                  ; ------------------------- Function definition end -----------------------
   583                                  
   584                                  
   585                                          %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 000007C4 B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 000007C9 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 000007CE 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 000007D6 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 000007DB 0F05                <1>                 syscall
    17                              <1> 
    18 000007DD 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 000007E5 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 000007ED 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 000007EF B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 000007F4 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 000007F9 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 00000801 BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 00000806 0F05                <1>                 syscall
    27                              <1> 
    28 00000808 4889C7              <1>                 mov rdi, rax
    29 0000080B 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 00000813 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 0000081B 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 0000081F 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 00000827 4D31C0              <1>                 xor r8, r8
    45 0000082A 4D31C9              <1>                 xor r9, r9
    46 0000082D 4D31D2              <1>                 xor r10, r10
    47 00000830 4831DB              <1>                 xor rbx, rbx
    48 00000833 4831C0              <1>                 xor rax, rax
    49 00000836 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 0000083C 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 0000083F 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 00000845 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 0000084C 7511                <1>                 jne .isPositive
    56 0000084E 41B801000000        <1>                 mov r8, 1
    57 00000854 48FFC6              <1>                 inc rsi
    58 00000857 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 0000085F EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 00000861 49F7E3              <1>                 mul r11
    64 00000864 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 00000868 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 0000086B 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 0000086E 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 00000871 7352                <1>                 jae .endBuf
    72                              <1> 
    73 00000873 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 00000879 80FB30              <1>                 cmp bl, '0'
    76 0000087C 7207                <1>                 jb .notDigit
    77                              <1> 
    78 0000087E 80FB39              <1>                 cmp bl, '9'
    79 00000881 7702                <1>                 ja .notDigit
    80                              <1> 
    81 00000883 EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 00000885 80FB2E              <1>                 cmp bl, '.'
    85 00000888 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 0000088A 80FB0A              <1>                 cmp bl, 0x0a
    88 0000088D 741A                <1>                 je .endLine
    89                              <1> 
    90 0000088F EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 00000891 4D85C9              <1>                 test r9, r9
    94 00000894 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 00000896 41B901000000        <1>                 mov r9, 1
    97 0000089C 48FFC6              <1>                 inc rsi
    98 0000089F 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 000008A7 EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 000008A9 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 000008B1 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 000008B3 48FFC6              <1>                 inc rsi
   107 000008B6 4839FE              <1>                 cmp rsi, rdi
   108 000008B9 740A                <1>                 je .endBuf
   109                              <1> 
   110 000008BB 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 000008C3 EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 000008C5 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 000008CD 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 000008CF 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 000008D7 00000000            <1>
   118 000008DB 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 000008E3 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 000008E7 4D85C0              <1>                 test r8, r8
   122 000008EA 7403                <1>                 je .isPositive2
   123                              <1> 
   124 000008EC 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 000008EF F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 000008F4 B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 000008F9 EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 000008FB 49FFCA              <1>                 dec r10
   134 000008FE 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 00000901 4D85D2              <1>                 test r10, r10
   138 00000904 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 00000906 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 0000090B F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 0000090F C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 00000910 B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 00000915 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 0000091A 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 00000922 BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 00000927 0F05                <1>                 syscall
   152                              <1> 
   153 00000929 B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 0000092E 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 00000935 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 00000937 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 0000093F 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 00000944 49FFCD              <1>                 dec r13
   171                              <1> 
   172 00000947 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 0000094C 4885DB              <1>                 test rbx, rbx
   174 0000094F 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 00000951 F30F7EC8            <1>                 movq xmm1, xmm0
   177 00000955 660FEFC0            <1>                 pxor xmm0, xmm0
   178 00000959 F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 0000095D F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 00000962 F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 00000967 F20F5CC1            <1>                 subsd xmm0, xmm1
   184 0000096B F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 00000970 [10000000]          <1>
   185 00000974 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 00000979 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 0000097F B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 00000984 4831D2              <1>                 xor rdx, rdx
   192 00000987 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 0000098A 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 00000990 41885500            <1>                 mov byte [r13], dl
   198 00000994 49FFCD              <1>                 dec r13
   199 00000997 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 0000099A 4885C9              <1>                 test rcx,rcx
   202 0000099D 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 0000099F 41C645002E          <1>                 mov byte [r13], '.'
   205 000009A4 49FFCD              <1>                 dec r13
   206                              <1> 
   207 000009A7 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 000009AA 4831D2              <1>                 xor rdx, rdx
   212 000009AD 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 000009B0 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 000009B6 41885500            <1>                 mov byte [r13], dl
   218 000009BA 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000009BD 85C0                <1>                 test eax, eax
   221 000009BF 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 000009C1 4885DB              <1>                 test rbx, rbx
   224 000009C4 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 000009C6 41C645002D          <1>                 mov byte [r13], '-'
   227 000009CB 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 000009CE 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 000009D0 [3F00000000000000]  <1>
   231 000009D8 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 000009DB 49FFC5              <1>                 inc r13
   234                              <1> 
   235 000009DE B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 000009E3 BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 000009E8 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 000009EB 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 000009EE 0F05                <1>                 syscall
   240                              <1> 
   241 000009F0 C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   586                                  
   587                                  section .data
   588                                  
   589                                  GLOBAL_SECTION: times 0 dq 0
   590                                  
   591                                  section .rodata
   592                                  
   593 0000003B 256C670A00              PRINTF_DOUBLE_FMT: db '%', 'l', 'g', 0x0a, 0
   594 00000040 256C6600                SCANF_DOUBLE_FMT:  db '%', 'l', 'f', 0
