     1                                  ___ir_block_1:
     2                                  ; Program start
     3                                  
     4                                  section .text
     5                                  
     6                                  extern printf
     7                                  extern scanf
     8                                  global _start
     9                                  
    10                                  _start:
    11 00000000 C8000000                                enter 0, 0
    12                                  ___ir_block_2:
    13 00000004 E80D000000                              call ___func_4
    14                                                  ; func call end
    15                                  
    16                                  ___ir_block_3:
    17 00000009 C9                                      leave
    18 0000000A B83C000000                              mov rax, 0x3c
    19 0000000F F2480F2CF8                              cvttsd2si rdi, xmm0
    20 00000014 0F05                                    syscall
    21                                  
    22                                  ___ir_block_4:
    23                                  ; =========================== Function definition =========================
    24                                  ___func_4:
    25 00000016 C8180000                                enter 24, 0
    26                                  
    27                                  ___ir_block_5:
    28 0000001A E8E6070000                              call doubleio_in
    29 0000001F 4883EC08                                sub rsp, 8
    30 00000023 F20F110424                              movsd qword [rsp], xmm0
    31                                  ___ir_block_6:
    32 00000028 488B1424                                mov rdx, [rsp]
    33 0000002C 4883C408                                add rsp, 8
    34 00000030 488955F8                                mov qword [rbp - 8 - 0], rdx
    35                                  ___ir_block_7:
    36 00000034 E8CC070000                              call doubleio_in
    37 00000039 4883EC08                                sub rsp, 8
    38 0000003D F20F110424                              movsd qword [rsp], xmm0
    39                                  ___ir_block_8:
    40 00000042 488B1424                                mov rdx, [rsp]
    41 00000046 4883C408                                add rsp, 8
    42 0000004A 488955F0                                mov qword [rbp - 8 - 8], rdx
    43                                  ___ir_block_9:
    44 0000004E E8B2070000                              call doubleio_in
    45 00000053 4883EC08                                sub rsp, 8
    46 00000057 F20F110424                              movsd qword [rsp], xmm0
    47                                  ___ir_block_10:
    48 0000005C 488B1424                                mov rdx, [rsp]
    49 00000060 4883C408                                add rsp, 8
    50 00000064 488955E8                                mov qword [rbp - 8 - 16], rdx
    51                                  ___ir_block_11:
    52 00000068 4883EC08                                sub rsp, 8
    53 0000006C 488B55F8                                mov rdx, qword [rbp - 8 - 0]
    54 00000070 48891424                                mov qword [rsp], rdx
    55                                  ___ir_block_12:
    56 00000074 488B1424                                mov rdx, [rsp]
    57 00000078 4883C408                                add rsp, 8
    58 0000007C 48895424E8                              mov qword [rsp - 8 - 16 - 0], rdx
    59                                  ___ir_block_13:
    60 00000081 4883EC08                                sub rsp, 8
    61 00000085 488B55F0                                mov rdx, qword [rbp - 8 - 8]
    62 00000089 48891424                                mov qword [rsp], rdx
    63                                  ___ir_block_14:
    64 0000008D 488B1424                                mov rdx, [rsp]
    65 00000091 4883C408                                add rsp, 8
    66 00000095 48895424E0                              mov qword [rsp - 8 - 16 - 8], rdx
    67                                  ___ir_block_15:
    68 0000009A 4883EC08                                sub rsp, 8
    69 0000009E 488B55E8                                mov rdx, qword [rbp - 8 - 16]
    70 000000A2 48891424                                mov qword [rsp], rdx
    71                                  ___ir_block_16:
    72 000000A6 488B1424                                mov rdx, [rsp]
    73 000000AA 4883C408                                add rsp, 8
    74 000000AE 48895424D8                              mov qword [rsp - 8 - 16 - 16], rdx
    75                                  ___ir_block_17:
    76 000000B3 E81A000000                              call ___func_22
    77                                                  ; func call end
    78                                  
    79                                  ___ir_block_18:
    80 000000B8 4883EC08                                sub rsp, 8
    81 000000BC F20F110424                              movsd qword [rsp], xmm0
    82                                  ___ir_block_19:
    83 000000C1 F20F100424                              movsd xmm0, [rsp]
    84 000000C6 4883C408                                add rsp, 8
    85                                  ___ir_block_20:
    86 000000CA C9                                      leave
    87 000000CB C3                                      ret
    88                                  
    89                                  ___ir_block_21:
    90 000000CC C9                                      leave
    91 000000CD 660FEFC0                                pxor xmm0, xmm0
    92 000000D1 C3                                      ret
    93                                  ; ------------------------- Function definition end -----------------------
    94                                  
    95                                  
    96                                  ___ir_block_22:
    97                                  ; =========================== Function definition =========================
    98                                  ___func_22:
    99 000000D2 C8200000                                enter 32, 0
   100                                  
   101                                  ___ir_block_23:
   102 000000D6 4883EC08                                sub rsp, 8
   103 000000DA 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   104 000000DE 48891424                                mov qword [rsp], rdx
   105                                  ___ir_block_24:
   106 000000E2 4883EC08                                sub rsp, 8
   107 000000E6 BA00000000                              mov rdx, 0x0 ; 0
   108 000000EB 48891424                                mov qword [rsp], rdx
   109                                  ___ir_block_25:
   110                                                  ; operands comparison: op1 == op2
   111 000000EF F20F101424                              movsd xmm2, [rsp]
   112 000000F4 F20F104C2408                            movsd xmm1, [rsp + 8]
   113 000000FA F20F10D9                                movsd xmm3, xmm1
   114 000000FE F20F5CDA                                subsd xmm3, xmm2
   115 00000102 F20F111C24                              movsd [rsp], xmm3
   116 00000107 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   116 00000110 7F                 
   117 00000111 48211424                                and qword [rsp], rdx
   118 00000115 F20F101C24                              movsd xmm3, [rsp]
   119 0000011A 4883C410                                add rsp, 16
   120                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   121                                  
   122 0000011E 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   122 00000123 [3B000000]         
   123 00000127 7314                                    jnc ___compare_25_false
   124                                  
   125 00000129 4883EC08                                sub rsp, 8
   126 0000012D 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   126 00000136 3F                 
   127 00000137 48891424                                mov qword [rsp], rdx
   128 0000013B EB0D                                    jmp ___compare_25_end
   129                                  
   130                                  ___compare_25_false:
   131 0000013D 4883EC08                                sub rsp, 8
   132 00000141 BA00000000                              mov rdx, 0x0 ; 0
   133 00000146 48891424                                mov qword [rsp], rdx
   134                                  ___compare_25_end:
   135                                  
   136                                  ___ir_block_26:
   137 0000014A 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   137 00000153 7F                 
   138 00000154 48211424                                and qword [rsp], rdx
   139 00000158 F20F100C24                              movsd xmm1, qword [rsp]
   140 0000015D 4883C408                                add rsp, 8
   141 00000161 660F2F0C25-                             comisd xmm1, [EPSILON]
   141 00000166 [3B000000]         
   142                                  ___ir_block_27:
   143 0000016A 724B                                    jc ___ir_block_36
   144                                  ___ir_block_28:
   145 0000016C 4883EC08                                sub rsp, 8
   146 00000170 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   147 00000174 48891424                                mov qword [rsp], rdx
   148                                  ___ir_block_29:
   149 00000178 488B1424                                mov rdx, [rsp]
   150 0000017C 4883C408                                add rsp, 8
   151 00000180 48895424E8                              mov qword [rsp - 8 - 16 - 0], rdx
   152                                  ___ir_block_30:
   153 00000185 4883EC08                                sub rsp, 8
   154 00000189 488B55E8                                mov rdx, qword [rbp - 8 - 16]
   155 0000018D 48891424                                mov qword [rsp], rdx
   156                                  ___ir_block_31:
   157 00000191 488B1424                                mov rdx, [rsp]
   158 00000195 4883C408                                add rsp, 8
   159 00000199 48895424E0                              mov qword [rsp - 8 - 16 - 8], rdx
   160                                  ___ir_block_32:
   161 0000019E E83D040000                              call ___func_103
   162                                                  ; func call end
   163                                  
   164                                  ___ir_block_33:
   165 000001A3 4883EC08                                sub rsp, 8
   166 000001A7 F20F110424                              movsd qword [rsp], xmm0
   167                                  ___ir_block_34:
   168 000001AC F20F100424                              movsd xmm0, [rsp]
   169 000001B1 4883C408                                add rsp, 8
   170                                  ___ir_block_35:
   171 000001B5 C9                                      leave
   172 000001B6 C3                                      ret
   173                                  
   174                                  ___ir_block_36:
   175                                  ___ir_block_37:
   176 000001B7 4883EC08                                sub rsp, 8
   177 000001BB 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   178 000001BF 48891424                                mov qword [rsp], rdx
   179                                  ___ir_block_38:
   180 000001C3 4883EC08                                sub rsp, 8
   181 000001C7 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   182 000001CB 48891424                                mov qword [rsp], rdx
   183                                  ___ir_block_39:
   184 000001CF F20F10442408                            movsd xmm0, [rsp + 8]
   185 000001D5 F20F590424                              mulsd xmm0, qword [rsp]
   186 000001DA 4883C408                                add rsp, 8
   187 000001DE F20F110424                              movsd qword [rsp], xmm0
   188                                  ___ir_block_40:
   189 000001E3 4883EC08                                sub rsp, 8
   190 000001E7 48BA00000000000010-                     mov rdx, 0x4010000000000000 ; 4
   190 000001F0 40                 
   191 000001F1 48891424                                mov qword [rsp], rdx
   192                                  ___ir_block_41:
   193 000001F5 4883EC08                                sub rsp, 8
   194 000001F9 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   195 000001FD 48891424                                mov qword [rsp], rdx
   196                                  ___ir_block_42:
   197 00000201 4883EC08                                sub rsp, 8
   198 00000205 488B55E8                                mov rdx, qword [rbp - 8 - 16]
   199 00000209 48891424                                mov qword [rsp], rdx
   200                                  ___ir_block_43:
   201 0000020D F20F10442408                            movsd xmm0, [rsp + 8]
   202 00000213 F20F590424                              mulsd xmm0, qword [rsp]
   203 00000218 4883C408                                add rsp, 8
   204 0000021C F20F110424                              movsd qword [rsp], xmm0
   205                                  ___ir_block_44:
   206 00000221 F20F10442408                            movsd xmm0, [rsp + 8]
   207 00000227 F20F590424                              mulsd xmm0, qword [rsp]
   208 0000022C 4883C408                                add rsp, 8
   209 00000230 F20F110424                              movsd qword [rsp], xmm0
   210                                  ___ir_block_45:
   211 00000235 F20F10442408                            movsd xmm0, [rsp + 8]
   212 0000023B F20F5C0424                              subsd xmm0, qword [rsp]
   213 00000240 4883C408                                add rsp, 8
   214 00000244 F20F110424                              movsd qword [rsp], xmm0
   215                                  ___ir_block_46:
   216 00000249 488B1424                                mov rdx, [rsp]
   217 0000024D 4883C408                                add rsp, 8
   218 00000251 488955E0                                mov qword [rbp - 8 - 24], rdx
   219                                  ___ir_block_47:
   220 00000255 4883EC08                                sub rsp, 8
   221 00000259 488B55E0                                mov rdx, qword [rbp - 8 - 24]
   222 0000025D 48891424                                mov qword [rsp], rdx
   223                                  ___ir_block_48:
   224 00000261 4883EC08                                sub rsp, 8
   225 00000265 BA00000000                              mov rdx, 0x0 ; 0
   226 0000026A 48891424                                mov qword [rsp], rdx
   227                                  ___ir_block_49:
   228                                                  ; operands comparison: op1 < op2
   229 0000026E F20F101424                              movsd xmm2, [rsp]
   230 00000273 F20F104C2408                            movsd xmm1, [rsp + 8]
   231 00000279 F20F10D9                                movsd xmm3, xmm1
   232 0000027D F20F5CDA                                subsd xmm3, xmm2
   233 00000281 F20F111C24                              movsd [rsp], xmm3
   234 00000286 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   234 0000028F 7F                 
   235 00000290 48211424                                and qword [rsp], rdx
   236 00000294 F20F101C24                              movsd xmm3, [rsp]
   237 00000299 4883C410                                add rsp, 16
   238                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   239                                  
   240 0000029D 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   240 000002A2 [3B000000]         
   241 000002A6 721A                                    jc ___compare_49_false
   242                                  
   243 000002A8 660F2FCA                                comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
   244 000002AC 7314                                    jnc ___compare_49_false
   245                                  
   246 000002AE 4883EC08                                sub rsp, 8
   247 000002B2 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   247 000002BB 3F                 
   248 000002BC 48891424                                mov qword [rsp], rdx
   249 000002C0 EB0D                                    jmp ___compare_49_end
   250                                  
   251                                  ___compare_49_false:
   252 000002C2 4883EC08                                sub rsp, 8
   253 000002C6 BA00000000                              mov rdx, 0x0 ; 0
   254 000002CB 48891424                                mov qword [rsp], rdx
   255                                  ___compare_49_end:
   256                                  
   257                                  ___ir_block_50:
   258 000002CF 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   258 000002D8 7F                 
   259 000002D9 48211424                                and qword [rsp], rdx
   260 000002DD F20F100C24                              movsd xmm1, qword [rsp]
   261 000002E2 4883C408                                add rsp, 8
   262 000002E6 660F2F0C25-                             comisd xmm1, [EPSILON]
   262 000002EB [3B000000]         
   263                                  ___ir_block_51:
   264 000002EF 7233                                    jc ___ir_block_57
   265                                  ___ir_block_52:
   266 000002F1 4883EC08                                sub rsp, 8
   267 000002F5 BA00000000                              mov rdx, 0x0 ; 0
   268 000002FA 48891424                                mov qword [rsp], rdx
   269                                  ___ir_block_53:
   270 000002FE F20F100424                              movsd xmm0, qword [rsp]
   271 00000303 4883C408                                add rsp, 8
   272 00000307 E86C060000                              call doubleio_out
   273                                  ___ir_block_54:
   274 0000030C 4883EC08                                sub rsp, 8
   275 00000310 BA00000000                              mov rdx, 0x0 ; 0
   276 00000315 48891424                                mov qword [rsp], rdx
   277                                  ___ir_block_55:
   278 00000319 F20F100424                              movsd xmm0, [rsp]
   279 0000031E 4883C408                                add rsp, 8
   280                                  ___ir_block_56:
   281 00000322 C9                                      leave
   282 00000323 C3                                      ret
   283                                  
   284                                  ___ir_block_57:
   285                                  ___ir_block_58:
   286 00000324 4883EC08                                sub rsp, 8
   287 00000328 488B55E0                                mov rdx, qword [rbp - 8 - 24]
   288 0000032C 48891424                                mov qword [rsp], rdx
   289                                  ___ir_block_59:
   290 00000330 4883EC08                                sub rsp, 8
   291 00000334 BA00000000                              mov rdx, 0x0 ; 0
   292 00000339 48891424                                mov qword [rsp], rdx
   293                                  ___ir_block_60:
   294                                                  ; operands comparison: op1 == op2
   295 0000033D F20F101424                              movsd xmm2, [rsp]
   296 00000342 F20F104C2408                            movsd xmm1, [rsp + 8]
   297 00000348 F20F10D9                                movsd xmm3, xmm1
   298 0000034C F20F5CDA                                subsd xmm3, xmm2
   299 00000350 F20F111C24                              movsd [rsp], xmm3
   300 00000355 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   300 0000035E 7F                 
   301 0000035F 48211424                                and qword [rsp], rdx
   302 00000363 F20F101C24                              movsd xmm3, [rsp]
   303 00000368 4883C410                                add rsp, 16
   304                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   305                                  
   306 0000036C 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   306 00000371 [3B000000]         
   307 00000375 7314                                    jnc ___compare_60_false
   308                                  
   309 00000377 4883EC08                                sub rsp, 8
   310 0000037B 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   310 00000384 3F                 
   311 00000385 48891424                                mov qword [rsp], rdx
   312 00000389 EB0D                                    jmp ___compare_60_end
   313                                  
   314                                  ___compare_60_false:
   315 0000038B 4883EC08                                sub rsp, 8
   316 0000038F BA00000000                              mov rdx, 0x0 ; 0
   317 00000394 48891424                                mov qword [rsp], rdx
   318                                  ___compare_60_end:
   319                                  
   320                                  ___ir_block_61:
   321 00000398 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   321 000003A1 7F                 
   322 000003A2 48211424                                and qword [rsp], rdx
   323 000003A6 F20F100C24                              movsd xmm1, qword [rsp]
   324 000003AB 4883C408                                add rsp, 8
   325 000003AF 660F2F0C25-                             comisd xmm1, [EPSILON]
   325 000003B4 [3B000000]         
   326                                  ___ir_block_62:
   327 000003B8 0F82A6000000                            jc ___ir_block_75
   328                                  ___ir_block_63:
   329 000003BE 4883EC08                                sub rsp, 8
   330 000003C2 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   330 000003CB 3F                 
   331 000003CC 48891424                                mov qword [rsp], rdx
   332                                  ___ir_block_64:
   333 000003D0 F20F100424                              movsd xmm0, qword [rsp]
   334 000003D5 4883C408                                add rsp, 8
   335 000003D9 E89A050000                              call doubleio_out
   336                                  ___ir_block_65:
   337 000003DE 4883EC08                                sub rsp, 8
   338 000003E2 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   339 000003E6 48891424                                mov qword [rsp], rdx
   340                                  ___ir_block_66:
   341 000003EA 48BA00000000000000-                     mov rdx, 9223372036854775808
   341 000003F3 80                 
   342 000003F4 48311424                                xor qword [rsp], rdx
   343                                  ___ir_block_67:
   344 000003F8 4883EC08                                sub rsp, 8
   345 000003FC 48BA00000000000000-                     mov rdx, 0x4000000000000000 ; 2
   345 00000405 40                 
   346 00000406 48891424                                mov qword [rsp], rdx
   347                                  ___ir_block_68:
   348 0000040A 4883EC08                                sub rsp, 8
   349 0000040E 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   350 00000412 48891424                                mov qword [rsp], rdx
   351                                  ___ir_block_69:
   352 00000416 F20F10442408                            movsd xmm0, [rsp + 8]
   353 0000041C F20F590424                              mulsd xmm0, qword [rsp]
   354 00000421 4883C408                                add rsp, 8
   355 00000425 F20F110424                              movsd qword [rsp], xmm0
   356                                  ___ir_block_70:
   357 0000042A F20F10442408                            movsd xmm0, [rsp + 8]
   358 00000430 F20F5E0424                              divsd xmm0, qword [rsp]
   359 00000435 4883C408                                add rsp, 8
   360 00000439 F20F110424                              movsd qword [rsp], xmm0
   361                                  ___ir_block_71:
   362 0000043E F20F100424                              movsd xmm0, qword [rsp]
   363 00000443 4883C408                                add rsp, 8
   364 00000447 E82C050000                              call doubleio_out
   365                                  ___ir_block_72:
   366 0000044C 4883EC08                                sub rsp, 8
   367 00000450 BA00000000                              mov rdx, 0x0 ; 0
   368 00000455 48891424                                mov qword [rsp], rdx
   369                                  ___ir_block_73:
   370 00000459 F20F100424                              movsd xmm0, [rsp]
   371 0000045E 4883C408                                add rsp, 8
   372                                  ___ir_block_74:
   373 00000462 C9                                      leave
   374 00000463 C3                                      ret
   375                                  
   376                                  ___ir_block_75:
   377                                  ___ir_block_76:
   378 00000464 4883EC08                                sub rsp, 8
   379 00000468 488B55E0                                mov rdx, qword [rbp - 8 - 24]
   380 0000046C 48891424                                mov qword [rsp], rdx
   381                                  ___ir_block_77:
   382 00000470 F20F510424                              sqrtsd xmm0, qword [rsp]
   383 00000475 F20F110424                              movsd qword [rsp], xmm0
   384                                  ___ir_block_78:
   385 0000047A 488B1424                                mov rdx, [rsp]
   386 0000047E 4883C408                                add rsp, 8
   387 00000482 488955E0                                mov qword [rbp - 8 - 24], rdx
   388                                  ___ir_block_79:
   389 00000486 4883EC08                                sub rsp, 8
   390 0000048A 48BA00000000000000-                     mov rdx, 0x4000000000000000 ; 2
   390 00000493 40                 
   391 00000494 48891424                                mov qword [rsp], rdx
   392                                  ___ir_block_80:
   393 00000498 F20F100424                              movsd xmm0, qword [rsp]
   394 0000049D 4883C408                                add rsp, 8
   395 000004A1 E8D2040000                              call doubleio_out
   396                                  ___ir_block_81:
   397 000004A6 4883EC08                                sub rsp, 8
   398 000004AA 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   399 000004AE 48891424                                mov qword [rsp], rdx
   400                                  ___ir_block_82:
   401 000004B2 48BA00000000000000-                     mov rdx, 9223372036854775808
   401 000004BB 80                 
   402 000004BC 48311424                                xor qword [rsp], rdx
   403                                  ___ir_block_83:
   404 000004C0 4883EC08                                sub rsp, 8
   405 000004C4 488B55E0                                mov rdx, qword [rbp - 8 - 24]
   406 000004C8 48891424                                mov qword [rsp], rdx
   407                                  ___ir_block_84:
   408 000004CC F20F10442408                            movsd xmm0, [rsp + 8]
   409 000004D2 F20F5C0424                              subsd xmm0, qword [rsp]
   410 000004D7 4883C408                                add rsp, 8
   411 000004DB F20F110424                              movsd qword [rsp], xmm0
   412                                  ___ir_block_85:
   413 000004E0 4883EC08                                sub rsp, 8
   414 000004E4 48BA00000000000000-                     mov rdx, 0x4000000000000000 ; 2
   414 000004ED 40                 
   415 000004EE 48891424                                mov qword [rsp], rdx
   416                                  ___ir_block_86:
   417 000004F2 4883EC08                                sub rsp, 8
   418 000004F6 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   419 000004FA 48891424                                mov qword [rsp], rdx
   420                                  ___ir_block_87:
   421 000004FE F20F10442408                            movsd xmm0, [rsp + 8]
   422 00000504 F20F590424                              mulsd xmm0, qword [rsp]
   423 00000509 4883C408                                add rsp, 8
   424 0000050D F20F110424                              movsd qword [rsp], xmm0
   425                                  ___ir_block_88:
   426 00000512 F20F10442408                            movsd xmm0, [rsp + 8]
   427 00000518 F20F5E0424                              divsd xmm0, qword [rsp]
   428 0000051D 4883C408                                add rsp, 8
   429 00000521 F20F110424                              movsd qword [rsp], xmm0
   430                                  ___ir_block_89:
   431 00000526 F20F100424                              movsd xmm0, qword [rsp]
   432 0000052B 4883C408                                add rsp, 8
   433 0000052F E844040000                              call doubleio_out
   434                                  ___ir_block_90:
   435 00000534 4883EC08                                sub rsp, 8
   436 00000538 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   437 0000053C 48891424                                mov qword [rsp], rdx
   438                                  ___ir_block_91:
   439 00000540 48BA00000000000000-                     mov rdx, 9223372036854775808
   439 00000549 80                 
   440 0000054A 48311424                                xor qword [rsp], rdx
   441                                  ___ir_block_92:
   442 0000054E 4883EC08                                sub rsp, 8
   443 00000552 488B55E0                                mov rdx, qword [rbp - 8 - 24]
   444 00000556 48891424                                mov qword [rsp], rdx
   445                                  ___ir_block_93:
   446 0000055A F20F10442408                            movsd xmm0, [rsp + 8]
   447 00000560 F20F580424                              addsd xmm0, qword [rsp]
   448 00000565 4883C408                                add rsp, 8
   449 00000569 F20F110424                              movsd qword [rsp], xmm0
   450                                  ___ir_block_94:
   451 0000056E 4883EC08                                sub rsp, 8
   452 00000572 48BA00000000000000-                     mov rdx, 0x4000000000000000 ; 2
   452 0000057B 40                 
   453 0000057C 48891424                                mov qword [rsp], rdx
   454                                  ___ir_block_95:
   455 00000580 4883EC08                                sub rsp, 8
   456 00000584 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   457 00000588 48891424                                mov qword [rsp], rdx
   458                                  ___ir_block_96:
   459 0000058C F20F10442408                            movsd xmm0, [rsp + 8]
   460 00000592 F20F590424                              mulsd xmm0, qword [rsp]
   461 00000597 4883C408                                add rsp, 8
   462 0000059B F20F110424                              movsd qword [rsp], xmm0
   463                                  ___ir_block_97:
   464 000005A0 F20F10442408                            movsd xmm0, [rsp + 8]
   465 000005A6 F20F5E0424                              divsd xmm0, qword [rsp]
   466 000005AB 4883C408                                add rsp, 8
   467 000005AF F20F110424                              movsd qword [rsp], xmm0
   468                                  ___ir_block_98:
   469 000005B4 F20F100424                              movsd xmm0, qword [rsp]
   470 000005B9 4883C408                                add rsp, 8
   471 000005BD E8B6030000                              call doubleio_out
   472                                  ___ir_block_99:
   473 000005C2 4883EC08                                sub rsp, 8
   474 000005C6 BA00000000                              mov rdx, 0x0 ; 0
   475 000005CB 48891424                                mov qword [rsp], rdx
   476                                  ___ir_block_100:
   477 000005CF F20F100424                              movsd xmm0, [rsp]
   478 000005D4 4883C408                                add rsp, 8
   479                                  ___ir_block_101:
   480 000005D8 C9                                      leave
   481 000005D9 C3                                      ret
   482                                  
   483                                  ___ir_block_102:
   484 000005DA C9                                      leave
   485 000005DB 660FEFC0                                pxor xmm0, xmm0
   486 000005DF C3                                      ret
   487                                  ; ------------------------- Function definition end -----------------------
   488                                  
   489                                  
   490                                  ___ir_block_103:
   491                                  ; =========================== Function definition =========================
   492                                  ___func_103:
   493 000005E0 C8100000                                enter 16, 0
   494                                  
   495                                  ___ir_block_104:
   496 000005E4 4883EC08                                sub rsp, 8
   497 000005E8 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   498 000005EC 48891424                                mov qword [rsp], rdx
   499                                  ___ir_block_105:
   500 000005F0 4883EC08                                sub rsp, 8
   501 000005F4 BA00000000                              mov rdx, 0x0 ; 0
   502 000005F9 48891424                                mov qword [rsp], rdx
   503                                  ___ir_block_106:
   504                                                  ; operands comparison: op1 == op2
   505 000005FD F20F101424                              movsd xmm2, [rsp]
   506 00000602 F20F104C2408                            movsd xmm1, [rsp + 8]
   507 00000608 F20F10D9                                movsd xmm3, xmm1
   508 0000060C F20F5CDA                                subsd xmm3, xmm2
   509 00000610 F20F111C24                              movsd [rsp], xmm3
   510 00000615 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   510 0000061E 7F                 
   511 0000061F 48211424                                and qword [rsp], rdx
   512 00000623 F20F101C24                              movsd xmm3, [rsp]
   513 00000628 4883C410                                add rsp, 16
   514                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   515                                  
   516 0000062C 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   516 00000631 [3B000000]         
   517 00000635 7314                                    jnc ___compare_106_false
   518                                  
   519 00000637 4883EC08                                sub rsp, 8
   520 0000063B 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   520 00000644 3F                 
   521 00000645 48891424                                mov qword [rsp], rdx
   522 00000649 EB0D                                    jmp ___compare_106_end
   523                                  
   524                                  ___compare_106_false:
   525 0000064B 4883EC08                                sub rsp, 8
   526 0000064F BA00000000                              mov rdx, 0x0 ; 0
   527 00000654 48891424                                mov qword [rsp], rdx
   528                                  ___compare_106_end:
   529                                  
   530                                  ___ir_block_107:
   531 00000658 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   531 00000661 7F                 
   532 00000662 48211424                                and qword [rsp], rdx
   533 00000666 F20F100C24                              movsd xmm1, qword [rsp]
   534 0000066B 4883C408                                add rsp, 8
   535 0000066F 660F2F0C25-                             comisd xmm1, [EPSILON]
   535 00000674 [3B000000]         
   536                                  ___ir_block_108:
   537 00000678 0F8201010000                            jc ___ir_block_125
   538                                  ___ir_block_109:
   539 0000067E 4883EC08                                sub rsp, 8
   540 00000682 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   541 00000686 48891424                                mov qword [rsp], rdx
   542                                  ___ir_block_110:
   543 0000068A 4883EC08                                sub rsp, 8
   544 0000068E BA00000000                              mov rdx, 0x0 ; 0
   545 00000693 48891424                                mov qword [rsp], rdx
   546                                  ___ir_block_111:
   547                                                  ; operands comparison: op1 == op2
   548 00000697 F20F101424                              movsd xmm2, [rsp]
   549 0000069C F20F104C2408                            movsd xmm1, [rsp + 8]
   550 000006A2 F20F10D9                                movsd xmm3, xmm1
   551 000006A6 F20F5CDA                                subsd xmm3, xmm2
   552 000006AA F20F111C24                              movsd [rsp], xmm3
   553 000006AF 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   553 000006B8 7F                 
   554 000006B9 48211424                                and qword [rsp], rdx
   555 000006BD F20F101C24                              movsd xmm3, [rsp]
   556 000006C2 4883C410                                add rsp, 16
   557                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   558                                  
   559 000006C6 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   559 000006CB [3B000000]         
   560 000006CF 7314                                    jnc ___compare_111_false
   561                                  
   562 000006D1 4883EC08                                sub rsp, 8
   563 000006D5 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   563 000006DE 3F                 
   564 000006DF 48891424                                mov qword [rsp], rdx
   565 000006E3 EB0D                                    jmp ___compare_111_end
   566                                  
   567                                  ___compare_111_false:
   568 000006E5 4883EC08                                sub rsp, 8
   569 000006E9 BA00000000                              mov rdx, 0x0 ; 0
   570 000006EE 48891424                                mov qword [rsp], rdx
   571                                  ___compare_111_end:
   572                                  
   573                                  ___ir_block_112:
   574 000006F2 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   574 000006FB 7F                 
   575 000006FC 48211424                                and qword [rsp], rdx
   576 00000700 F20F100C24                              movsd xmm1, qword [rsp]
   577 00000705 4883C408                                add rsp, 8
   578 00000709 660F2F0C25-                             comisd xmm1, [EPSILON]
   578 0000070E [3B000000]         
   579                                  ___ir_block_113:
   580 00000712 7238                                    jc ___ir_block_119
   581                                  ___ir_block_114:
   582 00000714 4883EC08                                sub rsp, 8
   583 00000718 48BA000000000000F0-                     mov rdx, 0xbff0000000000000 ; -1
   583 00000721 BF                 
   584 00000722 48891424                                mov qword [rsp], rdx
   585                                  ___ir_block_115:
   586 00000726 F20F100424                              movsd xmm0, qword [rsp]
   587 0000072B 4883C408                                add rsp, 8
   588 0000072F E844020000                              call doubleio_out
   589                                  ___ir_block_116:
   590 00000734 4883EC08                                sub rsp, 8
   591 00000738 BA00000000                              mov rdx, 0x0 ; 0
   592 0000073D 48891424                                mov qword [rsp], rdx
   593                                  ___ir_block_117:
   594 00000741 F20F100424                              movsd xmm0, [rsp]
   595 00000746 4883C408                                add rsp, 8
   596                                  ___ir_block_118:
   597 0000074A C9                                      leave
   598 0000074B C3                                      ret
   599                                  
   600                                  ___ir_block_119:
   601                                  ___ir_block_120:
   602 0000074C 4883EC08                                sub rsp, 8
   603 00000750 BA00000000                              mov rdx, 0x0 ; 0
   604 00000755 48891424                                mov qword [rsp], rdx
   605                                  ___ir_block_121:
   606 00000759 F20F100424                              movsd xmm0, qword [rsp]
   607 0000075E 4883C408                                add rsp, 8
   608 00000762 E811020000                              call doubleio_out
   609                                  ___ir_block_122:
   610 00000767 4883EC08                                sub rsp, 8
   611 0000076B BA00000000                              mov rdx, 0x0 ; 0
   612 00000770 48891424                                mov qword [rsp], rdx
   613                                  ___ir_block_123:
   614 00000774 F20F100424                              movsd xmm0, [rsp]
   615 00000779 4883C408                                add rsp, 8
   616                                  ___ir_block_124:
   617 0000077D C9                                      leave
   618 0000077E C3                                      ret
   619                                  
   620                                  ___ir_block_125:
   621                                  ___ir_block_126:
   622 0000077F 4883EC08                                sub rsp, 8
   623 00000783 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   623 0000078C 3F                 
   624 0000078D 48891424                                mov qword [rsp], rdx
   625                                  ___ir_block_127:
   626 00000791 F20F100424                              movsd xmm0, qword [rsp]
   627 00000796 4883C408                                add rsp, 8
   628 0000079A E8D9010000                              call doubleio_out
   629                                  ___ir_block_128:
   630 0000079F 4883EC08                                sub rsp, 8
   631 000007A3 488B55F0                                mov rdx, qword [rbp - 8 - 8]
   632 000007A7 48891424                                mov qword [rsp], rdx
   633                                  ___ir_block_129:
   634 000007AB 48BA00000000000000-                     mov rdx, 9223372036854775808
   634 000007B4 80                 
   635 000007B5 48311424                                xor qword [rsp], rdx
   636                                  ___ir_block_130:
   637 000007B9 4883EC08                                sub rsp, 8
   638 000007BD 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   639 000007C1 48891424                                mov qword [rsp], rdx
   640                                  ___ir_block_131:
   641 000007C5 F20F10442408                            movsd xmm0, [rsp + 8]
   642 000007CB F20F5E0424                              divsd xmm0, qword [rsp]
   643 000007D0 4883C408                                add rsp, 8
   644 000007D4 F20F110424                              movsd qword [rsp], xmm0
   645                                  ___ir_block_132:
   646 000007D9 F20F100424                              movsd xmm0, qword [rsp]
   647 000007DE 4883C408                                add rsp, 8
   648 000007E2 E891010000                              call doubleio_out
   649                                  ___ir_block_133:
   650 000007E7 4883EC08                                sub rsp, 8
   651 000007EB BA00000000                              mov rdx, 0x0 ; 0
   652 000007F0 48891424                                mov qword [rsp], rdx
   653                                  ___ir_block_134:
   654 000007F4 F20F100424                              movsd xmm0, [rsp]
   655 000007F9 4883C408                                add rsp, 8
   656                                  ___ir_block_135:
   657 000007FD C9                                      leave
   658 000007FE C3                                      ret
   659                                  
   660                                  ___ir_block_136:
   661 000007FF C9                                      leave
   662 00000800 660FEFC0                                pxor xmm0, xmm0
   663 00000804 C3                                      ret
   664                                  ; ------------------------- Function definition end -----------------------
   665                                  
   666                                  
   667                                  ___ir_block_137:
   668                                  %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 00000805 B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 0000080A BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 0000080F 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 00000817 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 0000081C 0F05                <1>                 syscall
    17                              <1> 
    18 0000081E 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 00000826 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 0000082E 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 00000830 B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 00000835 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 0000083A 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 00000842 BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 00000847 0F05                <1>                 syscall
    27                              <1> 
    28 00000849 4889C7              <1>                 mov rdi, rax
    29 0000084C 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 00000854 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 0000085C 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 00000860 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 00000868 4D31C0              <1>                 xor r8, r8
    45 0000086B 4D31C9              <1>                 xor r9, r9
    46 0000086E 4D31D2              <1>                 xor r10, r10
    47 00000871 4831DB              <1>                 xor rbx, rbx
    48 00000874 4831C0              <1>                 xor rax, rax
    49 00000877 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 0000087D 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 00000880 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 00000886 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 0000088D 7511                <1>                 jne .isPositive
    56 0000088F 41B801000000        <1>                 mov r8, 1
    57 00000895 48FFC6              <1>                 inc rsi
    58 00000898 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 000008A0 EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 000008A2 49F7E3              <1>                 mul r11
    64 000008A5 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 000008A9 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 000008AC 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 000008AF 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 000008B2 7352                <1>                 jae .endBuf
    72                              <1> 
    73 000008B4 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 000008BA 80FB30              <1>                 cmp bl, '0'
    76 000008BD 7207                <1>                 jb .notDigit
    77                              <1> 
    78 000008BF 80FB39              <1>                 cmp bl, '9'
    79 000008C2 7702                <1>                 ja .notDigit
    80                              <1> 
    81 000008C4 EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 000008C6 80FB2E              <1>                 cmp bl, '.'
    85 000008C9 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 000008CB 80FB0A              <1>                 cmp bl, 0x0a
    88 000008CE 741A                <1>                 je .endLine
    89                              <1> 
    90 000008D0 EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 000008D2 4D85C9              <1>                 test r9, r9
    94 000008D5 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 000008D7 41B901000000        <1>                 mov r9, 1
    97 000008DD 48FFC6              <1>                 inc rsi
    98 000008E0 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 000008E8 EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 000008EA 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 000008F2 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 000008F4 48FFC6              <1>                 inc rsi
   107 000008F7 4839FE              <1>                 cmp rsi, rdi
   108 000008FA 740A                <1>                 je .endBuf
   109                              <1> 
   110 000008FC 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 00000904 EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 00000906 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 0000090E 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 00000910 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 00000918 00000000            <1>
   118 0000091C 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 00000924 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 00000928 4D85C0              <1>                 test r8, r8
   122 0000092B 7403                <1>                 je .isPositive2
   123                              <1> 
   124 0000092D 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 00000930 F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 00000935 B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 0000093A EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 0000093C 49FFCA              <1>                 dec r10
   134 0000093F 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 00000942 4D85D2              <1>                 test r10, r10
   138 00000945 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 00000947 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 0000094C F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 00000950 C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 00000951 B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 00000956 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 0000095B 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 00000963 BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 00000968 0F05                <1>                 syscall
   152                              <1> 
   153 0000096A B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 0000096F 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 00000976 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 00000978 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 00000980 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 00000985 49FFCD              <1>                 dec r13
   171                              <1> 
   172 00000988 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 0000098D 4885DB              <1>                 test rbx, rbx
   174 00000990 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 00000992 F30F7EC8            <1>                 movq xmm1, xmm0
   177 00000996 660FEFC0            <1>                 pxor xmm0, xmm0
   178 0000099A F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 0000099E F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 000009A3 F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 000009A8 F20F5CC1            <1>                 subsd xmm0, xmm1
   184 000009AC F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 000009B1 [10000000]          <1>
   185 000009B5 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 000009BA 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 000009C0 B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 000009C5 4831D2              <1>                 xor rdx, rdx
   192 000009C8 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 000009CB 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 000009D1 41885500            <1>                 mov byte [r13], dl
   198 000009D5 49FFCD              <1>                 dec r13
   199 000009D8 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 000009DB 4885C9              <1>                 test rcx,rcx
   202 000009DE 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 000009E0 41C645002E          <1>                 mov byte [r13], '.'
   205 000009E5 49FFCD              <1>                 dec r13
   206                              <1> 
   207 000009E8 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 000009EB 4831D2              <1>                 xor rdx, rdx
   212 000009EE 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 000009F1 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 000009F7 41885500            <1>                 mov byte [r13], dl
   218 000009FB 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000009FE 85C0                <1>                 test eax, eax
   221 00000A00 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 00000A02 4885DB              <1>                 test rbx, rbx
   224 00000A05 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 00000A07 41C645002D          <1>                 mov byte [r13], '-'
   227 00000A0C 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 00000A0F 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 00000A11 [3F00000000000000]  <1>
   231 00000A19 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 00000A1C 49FFC5              <1>                 inc r13
   234                              <1> 
   235 00000A1F B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 00000A24 BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 00000A29 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 00000A2C 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 00000A2F 0F05                <1>                 syscall
   240                              <1> 
   241 00000A31 C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   669                                  
   670                                  section .data
   671                                  
   672                                  GLOBAL_SECTION: times 0 dq 0
   673                                  
   674                                  section .rodata
   675                                  
   676 0000003B 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d ; 1e-06
   677                                  
