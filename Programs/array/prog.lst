     1                                  ___ir_block_1:                            ; offs: 0x120
     2                                  %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> TEXT_BEGIN:
     4                              <1> 
     5                              <1> ;-------------------------------------------------
     6                              <1> ; read double
     7                              <1> ;
     8                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     9                              <1> ;
    10                              <1> ; Ret:      xmm0
    11                              <1> ;-------------------------------------------------
    12                              <1> doubleio_in:
    13                              <1> 
    14 00000000 B801000000          <1>                 mov rax, 0x01               ; sys_write
    15 00000005 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    16 0000000A 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    17 00000012 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    18 00000017 0F05                <1>                 syscall
    19                              <1> 
    20 00000019 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    21 00000021 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    22 00000029 7230                <1>                 jb .bufIsNotEmpty
    23                              <1> 
    24 0000002B B800000000          <1>                 mov rax, 0x00               ; sys_read
    25 00000030 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    26 00000035 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    27 0000003D BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    28 00000042 0F05                <1>                 syscall
    29                              <1> 
    30 00000044 4889C7              <1>                 mov rdi, rax
    31 00000047 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    32 0000004F 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    32 00000057 00000000            <1>
    33                              <1> 
    34                              <1> .bufIsNotEmpty:
    35 0000005B 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    36                              <1> 
    37                              <1>                 ; rdi  - buf len
    38                              <1>                 ; rsi  - buf pos
    39                              <1>                 ; rbx  - cur symbol
    40                              <1>                 ; r8   - is negative
    41                              <1>                 ; r9   - is after floating point
    42                              <1>                 ; r10  - exp10
    43                              <1>                 ; r11  = 10
    44                              <1>                 ; rax  - number
    45                              <1> 
    46 00000063 4D31C0              <1>                 xor r8, r8
    47 00000066 4D31C9              <1>                 xor r9, r9
    48 00000069 4D31D2              <1>                 xor r10, r10
    49 0000006C 4831DB              <1>                 xor rbx, rbx
    50 0000006F 4831C0              <1>                 xor rax, rax
    51 00000072 41BB0A000000        <1>                 mov r11, 10
    52                              <1> 
    53 00000078 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    54 0000007B 0F83CE000000        <1>                 jae .error
    55                              <1> 
    56 00000081 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    57 00000088 7511                <1>                 jne .isPositive
    58 0000008A 41B801000000        <1>                 mov r8, 1
    59 00000090 48FFC6              <1>                 inc rsi
    60 00000093 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    61                              <1> 
    62                              <1> .isPositive:
    63 0000009B EB10                <1>                 jmp .whileClause
    64                              <1> .whileBody:
    65 0000009D 49F7E3              <1>                 mul r11
    66 000000A0 488D5BD0            <1>                 lea rbx, [rbx - '0']
    67 000000A4 4801D8              <1>                 add rax, rbx
    68                              <1> 
    69 000000A7 4D01CA              <1>                 add r10, r9 ; inc exp10
    70 000000AA 48FFC6              <1>                 inc rsi
    71                              <1> 
    72                              <1> .whileClause:
    73 000000AD 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    74 000000B0 7352                <1>                 jae .endBuf
    75                              <1> 
    76 000000B2 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    77                              <1> 
    78 000000B8 80FB30              <1>                 cmp bl, '0'
    79 000000BB 7207                <1>                 jb .notDigit
    80                              <1> 
    81 000000BD 80FB39              <1>                 cmp bl, '9'
    82 000000C0 7702                <1>                 ja .notDigit
    83                              <1> 
    84 000000C2 EBD9                <1>                 jmp .whileBody
    85                              <1> 
    86                              <1> .notDigit:
    87 000000C4 80FB2E              <1>                 cmp bl, '.'
    88 000000C7 7407                <1>                 je .floatingPoint
    89                              <1> 
    90 000000C9 80FB0A              <1>                 cmp bl, 0x0a
    91 000000CC 741A                <1>                 je .endLine
    92                              <1> 
    93 000000CE EB7F                <1>                 jmp .error
    94                              <1> 
    95                              <1> .floatingPoint:
    96 000000D0 4D85C9              <1>                 test r9, r9
    97 000000D3 757A                <1>                 jne .error ; several floating points in one number
    98                              <1> 
    99 000000D5 41B901000000        <1>                 mov r9, 1
   100 000000DB 48FFC6              <1>                 inc rsi
   101 000000DE 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
   102                              <1> 
   103 000000E6 EBC5                <1>                 jmp .whileClause
   104                              <1> 
   105                              <1> .endLine:
   106 000000E8 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   107 000000F0 745D                <1>                 je .error ; empty input
   108                              <1> 
   109 000000F2 48FFC6              <1>                 inc rsi
   110 000000F5 4839FE              <1>                 cmp rsi, rdi
   111 000000F8 740A                <1>                 je .endBuf
   112                              <1> 
   113 000000FA 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   114 00000102 EB22                <1>                 jmp .writeAns
   115                              <1> 
   116                              <1> .endBuf:
   117 00000104 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   118 0000010C 7441                <1>                 je .error ; empty input
   119                              <1> 
   120 0000010E 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   120 00000116 00000000            <1>
   121 0000011A 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   121 00000122 00000000            <1>
   122                              <1> 
   123                              <1> .writeAns:
   124 00000126 4D85C0              <1>                 test r8, r8
   125 00000129 7403                <1>                 je .isPositive2
   126                              <1> 
   127 0000012B 48F7D8              <1>                 neg rax
   128                              <1> 
   129                              <1> .isPositive2:
   130 0000012E F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   131                              <1> 
   132 00000133 B801000000          <1>                 mov rax, 1
   133                              <1> 
   134 00000138 EB06                <1>                 jmp .forExpClause
   135                              <1> .forExpBody:
   136 0000013A 49FFCA              <1>                 dec r10
   137 0000013D 49F7E3              <1>                 mul r11
   138                              <1> 
   139                              <1> .forExpClause:
   140 00000140 4D85D2              <1>                 test r10, r10
   141 00000143 75F5                <1>                 jne .forExpBody
   142                              <1> 
   143 00000145 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   144                              <1> 
   145 0000014A F20F5EC1            <1>                 divsd xmm0, xmm1
   146                              <1> 
   147 0000014E C3                  <1>                 ret
   148                              <1> 
   149                              <1> .error:
   150 0000014F B801000000          <1>                 mov rax, 0x01           ; sys_write
   151 00000154 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   152 00000159 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   153 00000161 BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   154 00000166 0F05                <1>                 syscall
   155                              <1> 
   156 00000168 B83C000000          <1>                 mov rax, 0x3c           ; exit
   157 0000016D 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   158 00000174 0F05                <1>                 syscall
   159                              <1> ;-------------------------------------------------
   160                              <1> 
   161                              <1> ;-------------------------------------------------
   162                              <1> ; print double
   163                              <1> ;
   164                              <1> ; Args:     xmm0 - number
   165                              <1> ;
   166                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   167                              <1> ;-------------------------------------------------
   168                              <1> doubleio_out:
   169                              <1> 
   170 00000176 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   171                              <1> 
   172 0000017E 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   173 00000183 49FFCD              <1>                 dec r13
   174                              <1> 
   175 00000186 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   176 0000018B 4885DB              <1>                 test rbx, rbx
   177 0000018E 790C                <1>                 jns .isPositive ; xmm0 >= 0
   178                              <1> 
   179 00000190 F30F7EC8            <1>                 movq xmm1, xmm0
   180 00000194 660FEFC0            <1>                 pxor xmm0, xmm0
   181 00000198 F20F5CC1            <1>                 subsd xmm0, xmm1
   182                              <1> .isPositive:
   183                              <1> 
   184 0000019C F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   185 000001A1 F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   186 000001A6 F20F5CC1            <1>                 subsd xmm0, xmm1
   187 000001AA F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   187 000001AF [10000000]          <1>
   188 000001B3 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   189                              <1> 
   190                              <1>                 ; convert non-int part
   191 000001B8 41BC0A000000        <1>                 mov r12d, 10    ; base
   192 000001BE B906000000          <1>                 mov rcx, 6      ; width
   193                              <1> .flWhileBody:
   194 000001C3 4831D2              <1>                 xor rdx, rdx
   195 000001C6 41F7F4              <1>                 div r12d
   196                              <1>                 ; eax = div
   197                              <1>                 ; edx = mod
   198                              <1> 
   199 000001C9 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   200 000001CF 41885500            <1>                 mov byte [r13], dl
   201 000001D3 49FFCD              <1>                 dec r13
   202 000001D6 48FFC9              <1>                 dec rcx
   203                              <1> 
   204 000001D9 4885C9              <1>                 test rcx,rcx
   205 000001DC 75E5                <1>                 jne .flWhileBody
   206                              <1> 
   207 000001DE 41C645002E          <1>                 mov byte [r13], '.'
   208 000001E3 49FFCD              <1>                 dec r13
   209                              <1> 
   210 000001E6 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   211                              <1> 
   212                              <1>                 ; convert int part
   213                              <1> .intWhileBody:
   214 000001E9 4831D2              <1>                 xor rdx, rdx
   215 000001EC 41F7F4              <1>                 div r12d
   216                              <1>                 ; eax = div
   217                              <1>                 ; edx = mod
   218                              <1> 
   219 000001EF 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   220 000001F5 41885500            <1>                 mov byte [r13], dl
   221 000001F9 49FFCD              <1>                 dec r13
   222                              <1> 
   223 000001FC 85C0                <1>                 test eax, eax
   224 000001FE 75E9                <1>                 jne .intWhileBody
   225                              <1> 
   226 00000200 4885DB              <1>                 test rbx, rbx
   227 00000203 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   228                              <1> 
   229 00000205 41C645002D          <1>                 mov byte [r13], '-'
   230 0000020A 49FFCD              <1>                 dec r13
   231                              <1> .isPositive2:
   232                              <1> 
   233 0000020D 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   233 0000020F [3F00000000000000]  <1>
   234 00000217 4D29EB              <1>                 sub r11, r13
   235                              <1> 
   236 0000021A 49FFC5              <1>                 inc r13
   237                              <1> 
   238 0000021D B801000000          <1>                 mov rax, 0x01   ; sys_write
   239 00000222 BF01000000          <1>                 mov rdi, 0x01   ; stdout
   240 00000227 4C89EE              <1>                 mov rsi, r13    ; buffer
   241 0000022A 4C89DA              <1>                 mov rdx, r11    ; buffer size
   242 0000022D 0F05                <1>                 syscall
   243                              <1> 
   244 0000022F C3                  <1>                 ret
   245                              <1> ;-------------------------------------------------
   246                              <1> 
   247                              <1> section .data
   248                              <1> 
   249                              <1> BufCapacity equ 64
   250                              <1> 
   251 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   252                              <1> 
   253 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   254 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   255 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   256                              <1> 
   257                              <1> section .rodata
   258                              <1> 
   259 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   259 00000009 39616263646566      <1>
   260 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   261                              <1> 
   262 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   262 00000021 626C653A20          <1>
   263                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   264                              <1> 
   265 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   265 0000002F 75742E204578697469- <1>
   265 00000038 6E670A              <1>
   266                              <1> InputErrorLen       equ $ - InputError
     3                                  
     4                                  section .rodata
     5                                  
     6 0000003B 90<rep 5h>              align 8
     7 00000040 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d
     8 00000048 90<rep 8h>              align 16
     9 00000050 FFFFFFFFFFFFFF7F00-     DOUBLE_NEG_CONST: dq -1 >> 1, 0
     9 00000059 00000000000000     
    10                                  
    11                                  section .data
    12                                  
    13                                  GLOBAL_SECTION: times 0 dq 0
    14                                  
    15                                  ; Program start
    16                                  
    17                                  section .text
    18                                  
    19                                  global _start
    20                                  
    21                                  _start:
    22 00000230 C8000000                                enter 0, 0
    23                                  ___ir_block_2:                            ; offs: 0x403234
    24 00000234 E80D000000                              call ___func_4
    25                                                  ; func call end
    26                                  
    27                                  ___ir_block_3:                            ; offs: 0x403239
    28 00000239 C9                                      leave
    29 0000023A B83C000000                              mov rax, 0x3c
    30 0000023F F2480F2CF8                              cvttsd2si rdi, xmm0
    31 00000244 0F05                                    syscall
    32                                  
    33                                  ___ir_block_4:                            ; offs: 0x40324b
    34                                  ; =========================== Function definition =========================
    35                                  ___func_4:
    36 00000246 C8580000                                enter 88, 0
    37                                  ___ir_block_5:                            ; offs: 0x40324f
    38 0000024A 4883EC08                                sub rsp, 8
    39 0000024E B800000000                              mov rax, 0x0
    40 00000253 48890424                                mov qword [rsp], rax
    41                                  
    42                                  ___ir_block_6:                            ; offs: 0x403264
    43 00000257 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
    44                                  ___ir_block_7:                            ; offs: 0x40326b
    45 0000025B 488B0424                                mov rax, [rsp]
    46                                  
    47 0000025F 4883C408                                add rsp, 8
    48 00000263 488901                                  mov qword [rcx], rax
    49                                  
    50                                  ___ir_block_8:                            ; offs: 0x403279
    51 00000266 4883EC08                                sub rsp, 8
    52 0000026A 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
    52 00000273 3F                 
    53 00000274 48890424                                mov qword [rsp], rax
    54                                  
    55                                  ___ir_block_9:                            ; offs: 0x40328e
    56 00000278 488D4DF0                                lea rcx, qword [rbp - 8 - 8]
    57                                  ___ir_block_10:                            ; offs: 0x403295
    58 0000027C 488B0424                                mov rax, [rsp]
    59                                  
    60 00000280 4883C408                                add rsp, 8
    61 00000284 488901                                  mov qword [rcx], rax
    62                                  
    63                                  ___ir_block_11:                            ; offs: 0x4032a3
    64 00000287 4883EC08                                sub rsp, 8
    65 0000028B 48B800000000000000-                     mov rax, 0x4000000000000000
    65 00000294 40                 
    66 00000295 48890424                                mov qword [rsp], rax
    67                                  
    68                                  ___ir_block_12:                            ; offs: 0x4032b8
    69 00000299 488D4DE8                                lea rcx, qword [rbp - 8 - 16]
    70                                  ___ir_block_13:                            ; offs: 0x4032bf
    71 0000029D 488B0424                                mov rax, [rsp]
    72                                  
    73 000002A1 4883C408                                add rsp, 8
    74 000002A5 488901                                  mov qword [rcx], rax
    75                                  
    76                                  ___ir_block_14:                            ; offs: 0x4032cd
    77 000002A8 4883EC08                                sub rsp, 8
    78 000002AC 48B800000000000008-                     mov rax, 0x4008000000000000
    78 000002B5 40                 
    79 000002B6 48890424                                mov qword [rsp], rax
    80                                  
    81                                  ___ir_block_15:                            ; offs: 0x4032e2
    82 000002BA 488D4DE0                                lea rcx, qword [rbp - 8 - 24]
    83                                  ___ir_block_16:                            ; offs: 0x4032e9
    84 000002BE 488B0424                                mov rax, [rsp]
    85                                  
    86 000002C2 4883C408                                add rsp, 8
    87 000002C6 488901                                  mov qword [rcx], rax
    88                                  
    89                                  ___ir_block_17:                            ; offs: 0x4032f7
    90 000002C9 4883EC08                                sub rsp, 8
    91 000002CD 48B800000000000010-                     mov rax, 0x4010000000000000
    91 000002D6 40                 
    92 000002D7 48890424                                mov qword [rsp], rax
    93                                  
    94                                  ___ir_block_18:                            ; offs: 0x40330c
    95 000002DB 488D4DD8                                lea rcx, qword [rbp - 8 - 32]
    96                                  ___ir_block_19:                            ; offs: 0x403313
    97 000002DF 488B0424                                mov rax, [rsp]
    98                                  
    99 000002E3 4883C408                                add rsp, 8
   100 000002E7 488901                                  mov qword [rcx], rax
   101                                  
   102                                  ___ir_block_20:                            ; offs: 0x403321
   103 000002EA 4883EC08                                sub rsp, 8
   104 000002EE 48B800000000000014-                     mov rax, 0x4014000000000000
   104 000002F7 40                 
   105 000002F8 48890424                                mov qword [rsp], rax
   106                                  
   107                                  ___ir_block_21:                            ; offs: 0x403336
   108 000002FC 488D4DD0                                lea rcx, qword [rbp - 8 - 40]
   109                                  ___ir_block_22:                            ; offs: 0x40333d
   110 00000300 488B0424                                mov rax, [rsp]
   111                                  
   112 00000304 4883C408                                add rsp, 8
   113 00000308 488901                                  mov qword [rcx], rax
   114                                  
   115                                  ___ir_block_23:                            ; offs: 0x40334b
   116 0000030B 4883EC08                                sub rsp, 8
   117 0000030F 48B800000000000018-                     mov rax, 0x4018000000000000
   117 00000318 40                 
   118 00000319 48890424                                mov qword [rsp], rax
   119                                  
   120                                  ___ir_block_24:                            ; offs: 0x403360
   121 0000031D 488D4DC8                                lea rcx, qword [rbp - 8 - 48]
   122                                  ___ir_block_25:                            ; offs: 0x403367
   123 00000321 488B0424                                mov rax, [rsp]
   124                                  
   125 00000325 4883C408                                add rsp, 8
   126 00000329 488901                                  mov qword [rcx], rax
   127                                  
   128                                  ___ir_block_26:                            ; offs: 0x403375
   129                                  ___ir_block_27:                            ; offs: 0x403375
   130 0000032C B800000000                              mov rax, 0x0
   131 00000331 488945A8                                mov qword [rbp - 8 - 80], rax
   132                                  
   133                                  ___ir_block_28:                            ; offs: 0x403386
   134                                  ___ir_block_29:                            ; offs: 0x403386
   135 00000335 4883EC08                                sub rsp, 8
   136 00000339 488B45A8                                mov rax, qword [rbp - 8 - 80]
   137                                  
   138 0000033D 48890424                                mov qword [rsp], rax
   139                                  
   140                                  ___ir_block_30:                            ; offs: 0x403398
   141 00000341 4883EC08                                sub rsp, 8
   142 00000345 488B45A8                                mov rax, qword [rbp - 8 - 80]
   143                                  
   144 00000349 48890424                                mov qword [rsp], rax
   145                                  
   146                                  ___ir_block_31:                            ; offs: 0x4033aa
   147 0000034D 4883EC08                                sub rsp, 8
   148 00000351 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
   148 0000035A 3F                 
   149 0000035B 48890424                                mov qword [rsp], rax
   150                                  
   151                                  ___ir_block_32:                            ; offs: 0x4033bf
   152 0000035F F30F7E442408                            movq xmm0, [rsp + 8]
   153 00000365 F20F580424                              addsd xmm0, qword [rsp]
   154 0000036A 4883C410                                add rsp, 16
   155 0000036E 660FD645A8                              movq qword [rbp - 8 - 80], xmm0
   156                                  ___ir_block_33:                            ; offs: 0x4033dc
   157                                  ___ir_block_34:                            ; offs: 0x4033dc
   158 00000373 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
   159                                  ___ir_block_35:                            ; offs: 0x4033e3
   160 00000377 F2480F2D0424                            cvtsd2si rax, [rsp]
   161 0000037D 4883C408                                add rsp, 8
   162 00000381 48C1E003                                shl rax, 3
   163 00000385 4829C1                                  sub rcx, rax
   164                                  ___ir_block_36:                            ; offs: 0x4033f7
   165                                  ___ir_block_37:                            ; offs: 0x4033f7
   166                                  ___ir_block_38:                            ; offs: 0x4033f7
   167                                                  ; operands comparison: op1 < op2
   168 00000388 F30F7E09                                movq xmm1, qword [rcx]
   169 0000038C 48B800000000000014-                     mov rax, 0x4014000000000000
   169 00000395 40                 
   170 00000396 66480F6ED0                              movq xmm2, rax
   171 0000039B 4883C4F8                                add rsp, -8
   172 0000039F F30F7ED9                                movq xmm3, xmm1
   173 000003A3 F20F5CDA                                subsd xmm3, xmm2
   174 000003A7 660F541C25-                             andpd xmm3, [DOUBLE_NEG_CONST]
   174 000003AC [50000000]         
   175                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   176                                  
   177 000003B0 660F2F1C25-                             comisd xmm3, [EPSILON]
   177 000003B5 [40000000]         
   178                                                  ; fabs(op1 - op2) {'<' | '>'} EPSILON
   179 000003B9 7212                                    jc ___compare_38_false
   180                                  
   181 000003BB 660F2FCA                                comisd xmm1, xmm2
   182                                                  ; op1 {'<' | '>'} op2
   183 000003BF 730C                                    jnc ___compare_38_false
   184                                  
   185 000003C1 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
   185 000003CA 3F                 
   186 000003CB EB05                                    jmp ___compare_38_end
   187                                  
   188                                  ___compare_38_false:
   189 000003CD B800000000                              mov rax, 0x0
   190                                  ___compare_38_end:
   191 000003D2 48890424                                mov qword [rsp], rax
   192                                  
   193                                  ___ir_block_39:                            ; offs: 0x403458
   194 000003D6 48B8FFFFFFFFFFFFFF-                     mov rax, 0x7fffffffffffffff
   194 000003DF 7F                 
   195 000003E0 48210424                                and qword [rsp], rax
   196 000003E4 F30F7E0C24                              movq xmm1, qword [rsp]
   197 000003E9 4883C408                                add rsp, 8
   198 000003ED 660F2F0C25-                             comisd xmm1, [EPSILON]
   198 000003F2 [40000000]         
   199                                  ___ir_block_40:                            ; offs: 0x40347b
   200 000003F6 722F                                    jc ___ir_block_47
   201                                  ___ir_block_41:                            ; offs: 0x403481
   202 000003F8 4883EC08                                sub rsp, 8
   203 000003FC 488B45A8                                mov rax, qword [rbp - 8 - 80]
   204                                  
   205 00000400 48890424                                mov qword [rsp], rax
   206                                  
   207                                  ___ir_block_42:                            ; offs: 0x403493
   208 00000404 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
   209                                  ___ir_block_43:                            ; offs: 0x40349a
   210 00000408 F2480F2D0424                            cvtsd2si rax, [rsp]
   211 0000040E 4883C408                                add rsp, 8
   212 00000412 48C1E003                                shl rax, 3
   213 00000416 4829C1                                  sub rcx, rax
   214                                  ___ir_block_44:                            ; offs: 0x4034ae
   215                                  ___ir_block_45:                            ; offs: 0x4034ae
   216 00000419 F30F7E01                                movq xmm0, qword [rcx]
   217 0000041D E854FDFFFF                              call doubleio_out
   218                                  ___ir_block_46:                            ; offs: 0x4034b7
   219 00000422 E90EFFFFFF                              jmp ___ir_block_28
   220                                  ___ir_block_47:                            ; offs: 0x4034bc
   221                                  ___ir_block_48:                            ; offs: 0x4034bc
   222 00000427 C9                                      leave
   223 00000428 660FEFC0                                pxor xmm0, xmm0
   224 0000042C C3                                      ret
   225                                  ; ------------------------- Function definition end -----------------------
   226                                  
   227                                  
