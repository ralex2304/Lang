     1                                  ___ir_block_1:                            ; offs: 0x120
     2                                  %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> TEXT_BEGIN:
     4                              <1> 
     5                              <1> ;-------------------------------------------------
     6                              <1> ; read double
     7                              <1> ;
     8                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     9                              <1> ;
    10                              <1> ; Ret:      xmm0
    11                              <1> ;-------------------------------------------------
    12                              <1> doubleio_in:
    13                              <1> 
    14 00000000 B801000000          <1>                 mov rax, 0x01               ; sys_write
    15 00000005 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    16 0000000A 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    17 00000012 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    18 00000017 0F05                <1>                 syscall
    19                              <1> 
    20 00000019 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    21 00000021 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    22 00000029 7230                <1>                 jb .bufIsNotEmpty
    23                              <1> 
    24 0000002B B800000000          <1>                 mov rax, 0x00               ; sys_read
    25 00000030 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    26 00000035 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    27 0000003D BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    28 00000042 0F05                <1>                 syscall
    29                              <1> 
    30 00000044 4889C7              <1>                 mov rdi, rax
    31 00000047 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    32 0000004F 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    32 00000057 00000000            <1>
    33                              <1> 
    34                              <1> .bufIsNotEmpty:
    35 0000005B 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    36                              <1> 
    37                              <1>                 ; rdi  - buf len
    38                              <1>                 ; rsi  - buf pos
    39                              <1>                 ; rbx  - cur symbol
    40                              <1>                 ; r8   - is negative
    41                              <1>                 ; r9   - is after floating point
    42                              <1>                 ; r10  - exp10
    43                              <1>                 ; r11  = 10
    44                              <1>                 ; rax  - number
    45                              <1> 
    46 00000063 4D31C0              <1>                 xor r8, r8
    47 00000066 4D31C9              <1>                 xor r9, r9
    48 00000069 4D31D2              <1>                 xor r10, r10
    49 0000006C 4831DB              <1>                 xor rbx, rbx
    50 0000006F 4831C0              <1>                 xor rax, rax
    51 00000072 41BB0A000000        <1>                 mov r11, 10
    52                              <1> 
    53 00000078 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    54 0000007B 0F83CB000000        <1>                 jae .error
    55                              <1> 
    56 00000081 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    57 00000088 7511                <1>                 jne .isPositive
    58 0000008A 41B801000000        <1>                 mov r8, 1
    59 00000090 48FFC6              <1>                 inc rsi
    60 00000093 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    61                              <1> 
    62                              <1> .isPositive:
    63 0000009B EB0D                <1>                 jmp .whileClause
    64                              <1> .whileBody:
    65 0000009D 49F7E3              <1>                 mul r11
    66 000000A0 488D43D0            <1>                 lea rax, [rbx - '0']
    67                              <1> 
    68 000000A4 4D01CA              <1>                 add r10, r9 ; inc exp10
    69 000000A7 48FFC6              <1>                 inc rsi
    70                              <1> 
    71                              <1> .whileClause:
    72 000000AA 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    73 000000AD 7352                <1>                 jae .endBuf
    74                              <1> 
    75 000000AF 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    76                              <1> 
    77 000000B5 80FB30              <1>                 cmp bl, '0'
    78 000000B8 7207                <1>                 jb .notDigit
    79                              <1> 
    80 000000BA 80FB39              <1>                 cmp bl, '9'
    81 000000BD 7702                <1>                 ja .notDigit
    82                              <1> 
    83 000000BF EBDC                <1>                 jmp .whileBody
    84                              <1> 
    85                              <1> .notDigit:
    86 000000C1 80FB2E              <1>                 cmp bl, '.'
    87 000000C4 7407                <1>                 je .floatingPoint
    88                              <1> 
    89 000000C6 80FB0A              <1>                 cmp bl, 0x0a
    90 000000C9 741A                <1>                 je .endLine
    91                              <1> 
    92 000000CB EB7F                <1>                 jmp .error
    93                              <1> 
    94                              <1> .floatingPoint:
    95 000000CD 4D85C9              <1>                 test r9, r9
    96 000000D0 757A                <1>                 jne .error ; several floating points in one number
    97                              <1> 
    98 000000D2 41B901000000        <1>                 mov r9, 1
    99 000000D8 48FFC6              <1>                 inc rsi
   100 000000DB 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
   101                              <1> 
   102 000000E3 EBC5                <1>                 jmp .whileClause
   103                              <1> 
   104                              <1> .endLine:
   105 000000E5 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   106 000000ED 745D                <1>                 je .error ; empty input
   107                              <1> 
   108 000000EF 48FFC6              <1>                 inc rsi
   109 000000F2 4839FE              <1>                 cmp rsi, rdi
   110 000000F5 740A                <1>                 je .endBuf
   111                              <1> 
   112 000000F7 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   113 000000FF EB22                <1>                 jmp .writeAns
   114                              <1> 
   115                              <1> .endBuf:
   116 00000101 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   117 00000109 7441                <1>                 je .error ; empty input
   118                              <1> 
   119 0000010B 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   119 00000113 00000000            <1>
   120 00000117 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   120 0000011F 00000000            <1>
   121                              <1> 
   122                              <1> .writeAns:
   123 00000123 4D85C0              <1>                 test r8, r8
   124 00000126 7403                <1>                 je .isPositive2
   125                              <1> 
   126 00000128 48F7D8              <1>                 neg rax
   127                              <1> 
   128                              <1> .isPositive2:
   129 0000012B F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   130                              <1> 
   131 00000130 B801000000          <1>                 mov rax, 1
   132                              <1> 
   133 00000135 EB06                <1>                 jmp .forExpClause
   134                              <1> .forExpBody:
   135 00000137 49FFCA              <1>                 dec r10
   136 0000013A 49F7E3              <1>                 mul r11
   137                              <1> 
   138                              <1> .forExpClause:
   139 0000013D 4D85D2              <1>                 test r10, r10
   140 00000140 75F5                <1>                 jne .forExpBody
   141                              <1> 
   142 00000142 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   143                              <1> 
   144 00000147 F20F5EC1            <1>                 divsd xmm0, xmm1
   145                              <1> 
   146 0000014B C3                  <1>                 ret
   147                              <1> 
   148                              <1> .error:
   149 0000014C B801000000          <1>                 mov rax, 0x01           ; sys_write
   150 00000151 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   151 00000156 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   152 0000015E BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   153 00000163 0F05                <1>                 syscall
   154                              <1> 
   155 00000165 B83C000000          <1>                 mov rax, 0x3c           ; exit
   156 0000016A 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   157 00000171 0F05                <1>                 syscall
   158                              <1> ;-------------------------------------------------
   159                              <1> 
   160                              <1> ;-------------------------------------------------
   161                              <1> ; print double
   162                              <1> ;
   163                              <1> ; Args:     xmm0 - number
   164                              <1> ;
   165                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   166                              <1> ;-------------------------------------------------
   167                              <1> doubleio_out:
   168                              <1> 
   169 00000173 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   170                              <1> 
   171 0000017B 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   172 00000180 49FFCD              <1>                 dec r13
   173                              <1> 
   174 00000183 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   175 00000188 4885DB              <1>                 test rbx, rbx
   176 0000018B 790C                <1>                 jns .isPositive ; xmm0 >= 0
   177                              <1> 
   178 0000018D F30F7EC8            <1>                 movq xmm1, xmm0
   179 00000191 660FEFC0            <1>                 pxor xmm0, xmm0
   180 00000195 F20F5CC1            <1>                 subsd xmm0, xmm1
   181                              <1> .isPositive:
   182                              <1> 
   183 00000199 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   184 0000019E F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   185 000001A3 F20F5CC1            <1>                 subsd xmm0, xmm1
   186 000001A7 F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   186 000001AC [10000000]          <1>
   187 000001B0 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   188                              <1> 
   189                              <1>                 ; convert non-int part
   190 000001B5 41BC0A000000        <1>                 mov r12d, 10    ; base
   191 000001BB B906000000          <1>                 mov rcx, 6      ; width
   192                              <1> .flWhileBody:
   193 000001C0 4831D2              <1>                 xor rdx, rdx
   194 000001C3 41F7F4              <1>                 div r12d
   195                              <1>                 ; eax = div
   196                              <1>                 ; edx = mod
   197                              <1> 
   198 000001C6 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   199 000001CC 41885500            <1>                 mov byte [r13], dl
   200 000001D0 49FFCD              <1>                 dec r13
   201 000001D3 48FFC9              <1>                 dec rcx
   202                              <1> 
   203 000001D6 4885C9              <1>                 test rcx,rcx
   204 000001D9 75E5                <1>                 jne .flWhileBody
   205                              <1> 
   206 000001DB 41C645002E          <1>                 mov byte [r13], '.'
   207 000001E0 49FFCD              <1>                 dec r13
   208                              <1> 
   209 000001E3 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   210                              <1> 
   211                              <1>                 ; convert int part
   212                              <1> .intWhileBody:
   213 000001E6 4831D2              <1>                 xor rdx, rdx
   214 000001E9 41F7F4              <1>                 div r12d
   215                              <1>                 ; eax = div
   216                              <1>                 ; edx = mod
   217                              <1> 
   218 000001EC 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   219 000001F2 41885500            <1>                 mov byte [r13], dl
   220 000001F6 49FFCD              <1>                 dec r13
   221                              <1> 
   222 000001F9 85C0                <1>                 test eax, eax
   223 000001FB 75E9                <1>                 jne .intWhileBody
   224                              <1> 
   225 000001FD 4885DB              <1>                 test rbx, rbx
   226 00000200 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   227                              <1> 
   228 00000202 41C645002D          <1>                 mov byte [r13], '-'
   229 00000207 49FFCD              <1>                 dec r13
   230                              <1> .isPositive2:
   231                              <1> 
   232 0000020A 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   232 0000020C [3F00000000000000]  <1>
   233 00000214 4D29EB              <1>                 sub r11, r13
   234                              <1> 
   235 00000217 49FFC5              <1>                 inc r13
   236                              <1> 
   237 0000021A B801000000          <1>                 mov rax, 0x01   ; sys_write
   238 0000021F BF01000000          <1>                 mov rdi, 0x01   ; stdout
   239 00000224 4C89EE              <1>                 mov rsi, r13    ; buffer
   240 00000227 4C89DA              <1>                 mov rdx, r11    ; buffer size
   241 0000022A 0F05                <1>                 syscall
   242                              <1> 
   243 0000022C C3                  <1>                 ret
   244                              <1> ;-------------------------------------------------
   245                              <1> 
   246                              <1> section .data
   247                              <1> 
   248                              <1> BufCapacity equ 64
   249                              <1> 
   250 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   251                              <1> 
   252 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   253 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   254 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   255                              <1> 
   256                              <1> section .rodata
   257                              <1> 
   258 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   258 00000009 39616263646566      <1>
   259 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   260                              <1> 
   261 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   261 00000021 626C653A20          <1>
   262                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   263                              <1> 
   264 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   264 0000002F 75742E204578697469- <1>
   264 00000038 6E670A              <1>
   265                              <1> InputErrorLen       equ $ - InputError
     3                                  
     4                                  section .rodata
     5                                  
     6 0000003B 90<rep 5h>              align 8
     7 00000040 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d
     8 00000048 90<rep 8h>              align 16
     9 00000050 FFFFFFFFFFFFFF7F00-     DOUBLE_NEG_CONST: dq -1 >> 1, 0
     9 00000059 00000000000000     
    10                                  
    11                                  section .data
    12                                  
    13                                  GLOBAL_SECTION: times 0 dq 0
    14                                  
    15                                  ; Program start
    16                                  
    17                                  section .text
    18                                  
    19                                  global _start
    20                                  
    21                                  _start:
    22 0000022D C8000000                                enter 0, 0
    23                                  ___ir_block_2:                            ; offs: 0x403231
    24 00000231 E80D000000                              call ___func_4
    25                                                  ; func call end
    26                                  
    27                                  ___ir_block_3:                            ; offs: 0x403236
    28 00000236 C9                                      leave
    29 00000237 B83C000000                              mov rax, 0x3c
    30 0000023C F2480F2CF8                              cvttsd2si rdi, xmm0
    31 00000241 0F05                                    syscall
    32                                  
    33                                  ___ir_block_4:                            ; offs: 0x403248
    34                                  ; =========================== Function definition =========================
    35                                  ___func_4:
    36 00000243 C8000000                                enter 0, 0
    37                                  ___ir_block_5:                            ; offs: 0x40324c
    38 00000247 E8B4FDFFFF                              call doubleio_in
    39 0000024C 660FD64424E8                            movq qword [rsp - 8 - 16 - 0], xmm0
    40                                  ___ir_block_6:                            ; offs: 0x40325a
    41                                  ___ir_block_7:                            ; offs: 0x40325a
    42 00000252 E81B000000                              call ___func_14
    43                                                  ; func call end
    44                                  
    45                                  ___ir_block_8:                            ; offs: 0x40325f
    46                                  ___ir_block_9:                            ; offs: 0x40325f
    47 00000257 F30F7EC0                                movq xmm0, xmm0
    48 0000025B E813FFFFFF                              call doubleio_out
    49                                  ___ir_block_10:                            ; offs: 0x403268
    50                                  ___ir_block_11:                            ; offs: 0x403268
    51 00000260 B800000000                              mov rax, 0x0
    52 00000265 66480F6EC0                              movq xmm0, rax
    53                                  ___ir_block_12:                            ; offs: 0x403277
    54 0000026A C9                                      leave
    55 0000026B C3                                      ret
    56                                  ___ir_block_13:                            ; offs: 0x403279
    57 0000026C C9                                      leave
    58 0000026D 660FEFC0                                pxor xmm0, xmm0
    59 00000271 C3                                      ret
    60                                  ; ------------------------- Function definition end -----------------------
    61                                  
    62                                  
    63                                  ___ir_block_14:                            ; offs: 0x40327f
    64                                  ; =========================== Function definition =========================
    65                                  ___func_14:
    66 00000272 C8080000                                enter 8, 0
    67                                  ___ir_block_15:                            ; offs: 0x403283
    68                                  ___ir_block_16:                            ; offs: 0x403283
    69                                  ___ir_block_17:                            ; offs: 0x403283
    70                                                  ; operands comparison: op1 > op2
    71 00000276 F30F7E4DF8                              movq xmm1, qword [rbp - 8 - 0]
    72 0000027B 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
    72 00000284 3F                 
    73 00000285 66480F6ED0                              movq xmm2, rax
    74 0000028A 4883C4F8                                add rsp, -8
    75 0000028E F30F7ED9                                movq xmm3, xmm1
    76 00000292 F20F5CDA                                subsd xmm3, xmm2
    77 00000296 660F541C25-                             andpd xmm3, [DOUBLE_NEG_CONST]
    77 0000029B [50000000]         
    78                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
    79                                  
    80 0000029F 660F2F1C25-                             comisd xmm3, [EPSILON]
    80 000002A4 [40000000]         
    81                                                  ; fabs(op1 - op2) {'<' | '>'} EPSILON
    82 000002A8 7212                                    jc ___compare_17_false
    83                                  
    84 000002AA 660F2FCA                                comisd xmm1, xmm2
    85                                                  ; op1 {'<' | '>'} op2
    86 000002AE 720C                                    jc ___compare_17_false
    87                                  
    88 000002B0 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
    88 000002B9 3F                 
    89 000002BA EB05                                    jmp ___compare_17_end
    90                                  
    91                                  ___compare_17_false:
    92 000002BC B800000000                              mov rax, 0x0
    93                                  ___compare_17_end:
    94 000002C1 48890424                                mov qword [rsp], rax
    95                                  
    96                                  ___ir_block_18:                            ; offs: 0x4032e8
    97 000002C5 48B8FFFFFFFFFFFFFF-                     mov rax, 0x7fffffffffffffff
    97 000002CE 7F                 
    98 000002CF 48210424                                and qword [rsp], rax
    99 000002D3 F30F7E0C24                              movq xmm1, qword [rsp]
   100 000002D8 4883C408                                add rsp, 8
   101 000002DC 660F2F0C25-                             comisd xmm1, [EPSILON]
   101 000002E1 [40000000]         
   102                                  ___ir_block_19:                            ; offs: 0x40330b
   103 000002E5 723F                                    jc ___ir_block_30
   104                                  ___ir_block_20:                            ; offs: 0x403311
   105 000002E7 4883EC08                                sub rsp, 8
   106 000002EB 488B45F8                                mov rax, qword [rbp - 8 - 0]
   107                                  
   108 000002EF 48890424                                mov qword [rsp], rax
   109                                  
   110                                  ___ir_block_21:                            ; offs: 0x403323
   111 000002F3 4883EC08                                sub rsp, 8
   112 000002F7 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
   112 00000300 3F                 
   113 00000301 48890424                                mov qword [rsp], rax
   114                                  
   115                                  ___ir_block_22:                            ; offs: 0x403338
   116 00000305 F30F7E442408                            movq xmm0, [rsp + 8]
   117 0000030B F20F5C0424                              subsd xmm0, qword [rsp]
   118 00000310 4883C410                                add rsp, 16
   119 00000314 660FD64424E8                            movq qword [rsp - 8 - 16 - 0], xmm0
   120                                  ___ir_block_23:                            ; offs: 0x403356
   121                                  ___ir_block_24:                            ; offs: 0x403356
   122 0000031A E853FFFFFF                              call ___func_14
   123                                                  ; func call end
   124                                  
   125                                  ___ir_block_25:                            ; offs: 0x40335b
   126                                  ___ir_block_26:                            ; offs: 0x40335b
   127                                  ___ir_block_27:                            ; offs: 0x40335b
   128 0000031F F20F5945F8                              mulsd xmm0, qword [rbp - 8 - 0]
   129                                  ___ir_block_28:                            ; offs: 0x403363
   130                                  ___ir_block_29:                            ; offs: 0x403363
   131 00000324 C9                                      leave
   132 00000325 C3                                      ret
   133                                  ___ir_block_30:                            ; offs: 0x403365
   134                                  ___ir_block_31:                            ; offs: 0x403365
   135                                  ___ir_block_32:                            ; offs: 0x403365
   136 00000326 48B8000000000000F0-                     mov rax, 0x3ff0000000000000
   136 0000032F 3F                 
   137 00000330 66480F6EC0                              movq xmm0, rax
   138                                  ___ir_block_33:                            ; offs: 0x403374
   139 00000335 C9                                      leave
   140 00000336 C3                                      ret
   141                                  ___ir_block_34:                            ; offs: 0x403376
   142 00000337 C9                                      leave
   143 00000338 660FEFC0                                pxor xmm0, xmm0
   144 0000033C C3                                      ret
   145                                  ; ------------------------- Function definition end -----------------------
   146                                  
   147                                  
