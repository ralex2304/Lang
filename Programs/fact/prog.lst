     1                                  ___ir_block_1:
     2                                  ; Program start
     3                                  
     4                                  section .text
     5                                  
     6                                  extern printf
     7                                  extern scanf
     8                                  global _start
     9                                  
    10                                  _start:
    11 00000000 C8000000                                enter 0, 0
    12                                  ___ir_block_2:
    13 00000004 E80D000000                              call ___func_4
    14                                                  ; func call end
    15                                  
    16                                  ___ir_block_3:
    17 00000009 C9                                      leave
    18 0000000A B83C000000                              mov rax, 0x3c
    19 0000000F F2480F2CF8                              cvttsd2si rdi, xmm0
    20 00000014 0F05                                    syscall
    21                                  
    22                                  ___ir_block_4:
    23                                  ; =========================== Function definition =========================
    24                                  ___func_4:
    25 00000016 C8000000                                enter 0, 0
    26                                  
    27                                  ___ir_block_5:
    28 0000001A E890010000                              call doubleio_in
    29 0000001F 4883EC08                                sub rsp, 8
    30 00000023 F20F110424                              movsd qword [rsp], xmm0
    31                                  ___ir_block_6:
    32 00000028 488B1424                                mov rdx, [rsp]
    33 0000002C 4883C408                                add rsp, 8
    34 00000030 48895424E8                              mov qword [rsp - 8 - 16 - 0], rdx
    35                                  ___ir_block_7:
    36 00000035 E835000000                              call ___func_14
    37                                                  ; func call end
    38                                  
    39                                  ___ir_block_8:
    40 0000003A 4883EC08                                sub rsp, 8
    41 0000003E F20F110424                              movsd qword [rsp], xmm0
    42                                  ___ir_block_9:
    43 00000043 F20F100424                              movsd xmm0, qword [rsp]
    44 00000048 4883C408                                add rsp, 8
    45 0000004C E8D1020000                              call doubleio_out
    46                                  ___ir_block_10:
    47 00000051 4883EC08                                sub rsp, 8
    48 00000055 BA00000000                              mov rdx, 0x0 ; 0
    49 0000005A 48891424                                mov qword [rsp], rdx
    50                                  ___ir_block_11:
    51 0000005E F20F100424                              movsd xmm0, [rsp]
    52 00000063 4883C408                                add rsp, 8
    53                                  ___ir_block_12:
    54 00000067 C9                                      leave
    55 00000068 C3                                      ret
    56                                  
    57                                  ___ir_block_13:
    58 00000069 C9                                      leave
    59 0000006A 660FEFC0                                pxor xmm0, xmm0
    60 0000006E C3                                      ret
    61                                  ; ------------------------- Function definition end -----------------------
    62                                  
    63                                  
    64                                  ___ir_block_14:
    65                                  ; =========================== Function definition =========================
    66                                  ___func_14:
    67 0000006F C8080000                                enter 8, 0
    68                                  
    69                                  ___ir_block_15:
    70 00000073 4883EC08                                sub rsp, 8
    71 00000077 488B55F8                                mov rdx, qword [rbp - 8 - 0]
    72 0000007B 48891424                                mov qword [rsp], rdx
    73                                  ___ir_block_16:
    74 0000007F 4883EC08                                sub rsp, 8
    75 00000083 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
    75 0000008C 3F                 
    76 0000008D 48891424                                mov qword [rsp], rdx
    77                                  ___ir_block_17:
    78                                                  ; operands comparison: op1 > op2
    79 00000091 F20F101424                              movsd xmm2, [rsp]
    80 00000096 F20F104C2408                            movsd xmm1, [rsp + 8]
    81 0000009C F20F10D9                                movsd xmm3, xmm1
    82 000000A0 F20F5CDA                                subsd xmm3, xmm2
    83 000000A4 F20F111C24                              movsd [rsp], xmm3
    84 000000A9 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
    84 000000B2 7F                 
    85 000000B3 48211424                                and qword [rsp], rdx
    86 000000B7 F20F101C24                              movsd xmm3, [rsp]
    87 000000BC 4883C410                                add rsp, 16
    88                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
    89                                  
    90 000000C0 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
    90 000000C5 [3B000000]         
    91 000000C9 721A                                    jc ___compare_17_false
    92                                  
    93 000000CB 660F2FCA                                comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
    94 000000CF 7214                                    jc ___compare_17_false
    95                                  
    96 000000D1 4883EC08                                sub rsp, 8
    97 000000D5 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
    97 000000DE 3F                 
    98 000000DF 48891424                                mov qword [rsp], rdx
    99 000000E3 EB0D                                    jmp ___compare_17_end
   100                                  
   101                                  ___compare_17_false:
   102 000000E5 4883EC08                                sub rsp, 8
   103 000000E9 BA00000000                              mov rdx, 0x0 ; 0
   104 000000EE 48891424                                mov qword [rsp], rdx
   105                                  ___compare_17_end:
   106                                  
   107                                  ___ir_block_18:
   108 000000F2 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   108 000000FB 7F                 
   109 000000FC 48211424                                and qword [rsp], rdx
   110 00000100 F20F100C24                              movsd xmm1, qword [rsp]
   111 00000105 4883C408                                add rsp, 8
   112 00000109 660F2F0C25-                             comisd xmm1, [EPSILON]
   112 0000010E [3B000000]         
   113                                  ___ir_block_19:
   114 00000112 7278                                    jc ___ir_block_30
   115                                  ___ir_block_20:
   116 00000114 4883EC08                                sub rsp, 8
   117 00000118 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   118 0000011C 48891424                                mov qword [rsp], rdx
   119                                  ___ir_block_21:
   120 00000120 4883EC08                                sub rsp, 8
   121 00000124 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   121 0000012D 3F                 
   122 0000012E 48891424                                mov qword [rsp], rdx
   123                                  ___ir_block_22:
   124 00000132 F20F10442408                            movsd xmm0, [rsp + 8]
   125 00000138 F20F5C0424                              subsd xmm0, qword [rsp]
   126 0000013D 4883C408                                add rsp, 8
   127 00000141 F20F110424                              movsd qword [rsp], xmm0
   128                                  ___ir_block_23:
   129 00000146 488B1424                                mov rdx, [rsp]
   130 0000014A 4883C408                                add rsp, 8
   131 0000014E 48895424E8                              mov qword [rsp - 8 - 16 - 0], rdx
   132                                  ___ir_block_24:
   133 00000153 E817FFFFFF                              call ___func_14
   134                                                  ; func call end
   135                                  
   136                                  ___ir_block_25:
   137 00000158 4883EC08                                sub rsp, 8
   138 0000015C F20F110424                              movsd qword [rsp], xmm0
   139                                  ___ir_block_26:
   140 00000161 4883EC08                                sub rsp, 8
   141 00000165 488B55F8                                mov rdx, qword [rbp - 8 - 0]
   142 00000169 48891424                                mov qword [rsp], rdx
   143                                  ___ir_block_27:
   144 0000016D F20F10442408                            movsd xmm0, [rsp + 8]
   145 00000173 F20F590424                              mulsd xmm0, qword [rsp]
   146 00000178 4883C408                                add rsp, 8
   147 0000017C F20F110424                              movsd qword [rsp], xmm0
   148                                  ___ir_block_28:
   149 00000181 F20F100424                              movsd xmm0, [rsp]
   150 00000186 4883C408                                add rsp, 8
   151                                  ___ir_block_29:
   152 0000018A C9                                      leave
   153 0000018B C3                                      ret
   154                                  
   155                                  ___ir_block_30:
   156                                  ___ir_block_31:
   157 0000018C 4883EC08                                sub rsp, 8
   158 00000190 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   158 00000199 3F                 
   159 0000019A 48891424                                mov qword [rsp], rdx
   160                                  ___ir_block_32:
   161 0000019E F20F100424                              movsd xmm0, [rsp]
   162 000001A3 4883C408                                add rsp, 8
   163                                  ___ir_block_33:
   164 000001A7 C9                                      leave
   165 000001A8 C3                                      ret
   166                                  
   167                                  ___ir_block_34:
   168 000001A9 C9                                      leave
   169 000001AA 660FEFC0                                pxor xmm0, xmm0
   170 000001AE C3                                      ret
   171                                  ; ------------------------- Function definition end -----------------------
   172                                  
   173                                  
   174                                  ___ir_block_35:
   175                                  %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 000001AF B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 000001B4 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 000001B9 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 000001C1 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 000001C6 0F05                <1>                 syscall
    17                              <1> 
    18 000001C8 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 000001D0 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 000001D8 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 000001DA B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 000001DF BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 000001E4 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 000001EC BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 000001F1 0F05                <1>                 syscall
    27                              <1> 
    28 000001F3 4889C7              <1>                 mov rdi, rax
    29 000001F6 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 000001FE 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 00000206 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 0000020A 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 00000212 4D31C0              <1>                 xor r8, r8
    45 00000215 4D31C9              <1>                 xor r9, r9
    46 00000218 4D31D2              <1>                 xor r10, r10
    47 0000021B 4831DB              <1>                 xor rbx, rbx
    48 0000021E 4831C0              <1>                 xor rax, rax
    49 00000221 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 00000227 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 0000022A 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 00000230 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 00000237 7511                <1>                 jne .isPositive
    56 00000239 41B801000000        <1>                 mov r8, 1
    57 0000023F 48FFC6              <1>                 inc rsi
    58 00000242 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 0000024A EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 0000024C 49F7E3              <1>                 mul r11
    64 0000024F 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 00000253 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 00000256 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 00000259 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 0000025C 7352                <1>                 jae .endBuf
    72                              <1> 
    73 0000025E 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 00000264 80FB30              <1>                 cmp bl, '0'
    76 00000267 7207                <1>                 jb .notDigit
    77                              <1> 
    78 00000269 80FB39              <1>                 cmp bl, '9'
    79 0000026C 7702                <1>                 ja .notDigit
    80                              <1> 
    81 0000026E EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 00000270 80FB2E              <1>                 cmp bl, '.'
    85 00000273 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 00000275 80FB0A              <1>                 cmp bl, 0x0a
    88 00000278 741A                <1>                 je .endLine
    89                              <1> 
    90 0000027A EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 0000027C 4D85C9              <1>                 test r9, r9
    94 0000027F 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 00000281 41B901000000        <1>                 mov r9, 1
    97 00000287 48FFC6              <1>                 inc rsi
    98 0000028A 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 00000292 EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 00000294 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 0000029C 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 0000029E 48FFC6              <1>                 inc rsi
   107 000002A1 4839FE              <1>                 cmp rsi, rdi
   108 000002A4 740A                <1>                 je .endBuf
   109                              <1> 
   110 000002A6 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 000002AE EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 000002B0 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 000002B8 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 000002BA 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 000002C2 00000000            <1>
   118 000002C6 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 000002CE 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 000002D2 4D85C0              <1>                 test r8, r8
   122 000002D5 7403                <1>                 je .isPositive2
   123                              <1> 
   124 000002D7 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 000002DA F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 000002DF B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 000002E4 EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 000002E6 49FFCA              <1>                 dec r10
   134 000002E9 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 000002EC 4D85D2              <1>                 test r10, r10
   138 000002EF 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 000002F1 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 000002F6 F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 000002FA C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 000002FB B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 00000300 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 00000305 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 0000030D BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 00000312 0F05                <1>                 syscall
   152                              <1> 
   153 00000314 B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 00000319 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 00000320 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 00000322 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 0000032A 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 0000032F 49FFCD              <1>                 dec r13
   171                              <1> 
   172 00000332 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 00000337 4885DB              <1>                 test rbx, rbx
   174 0000033A 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 0000033C F30F7EC8            <1>                 movq xmm1, xmm0
   177 00000340 660FEFC0            <1>                 pxor xmm0, xmm0
   178 00000344 F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 00000348 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 0000034D F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 00000352 F20F5CC1            <1>                 subsd xmm0, xmm1
   184 00000356 F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 0000035B [10000000]          <1>
   185 0000035F F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 00000364 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 0000036A B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 0000036F 4831D2              <1>                 xor rdx, rdx
   192 00000372 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 00000375 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 0000037B 41885500            <1>                 mov byte [r13], dl
   198 0000037F 49FFCD              <1>                 dec r13
   199 00000382 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 00000385 4885C9              <1>                 test rcx,rcx
   202 00000388 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 0000038A 41C645002E          <1>                 mov byte [r13], '.'
   205 0000038F 49FFCD              <1>                 dec r13
   206                              <1> 
   207 00000392 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 00000395 4831D2              <1>                 xor rdx, rdx
   212 00000398 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 0000039B 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 000003A1 41885500            <1>                 mov byte [r13], dl
   218 000003A5 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000003A8 85C0                <1>                 test eax, eax
   221 000003AA 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 000003AC 4885DB              <1>                 test rbx, rbx
   224 000003AF 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 000003B1 41C645002D          <1>                 mov byte [r13], '-'
   227 000003B6 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 000003B9 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 000003BB [3F00000000000000]  <1>
   231 000003C3 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 000003C6 49FFC5              <1>                 inc r13
   234                              <1> 
   235 000003C9 B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 000003CE BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 000003D3 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 000003D6 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 000003D9 0F05                <1>                 syscall
   240                              <1> 
   241 000003DB C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   176                                  
   177                                  section .data
   178                                  
   179                                  GLOBAL_SECTION: times 0 dq 0
   180                                  
   181                                  section .rodata
   182                                  
   183 0000003B 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d ; 1e-06
   184                                  
