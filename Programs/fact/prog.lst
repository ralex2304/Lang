     1                                  ; Program start
     2                                  
     3                                  section .text
     4                                  
     5                                  extern printf
     6                                  extern scanf
     7                                  global _start
     8                                  
     9                                  _start:
    10 00000000 C8000000                        enter 0, 0
    11                                          ; func call: остров_в_океане
    12 00000004 E80D000000                      call ___func_0
    13                                          ; func call end
    14                                  
    15 00000009 C9                              leave
    16 0000000A B83C000000                      mov rax, 0x3c
    17 0000000F F2480F2CF8                      cvttsd2si rdi, xmm0
    18 00000014 0F05                            syscall
    19                                  
    20                                  ; =========================== Function definition =========================
    21                                  ; func name: остров_в_океане
    22                                  ___func_0:
    23 00000016 C8000000                        enter 0x0000, 0; this place is patched in the end of function definition
    24                                  
    25 0000001A E88D010000                      call doubleio_in
    26 0000001F 4883EC08                        sub rsp, 8
    27 00000023 F20F110424                      movsd [rsp], xmm0
    28                                  
    29 00000028 8F4424E8                        pop qword [rsp - 8 - 16 - 0]
    30                                  
    31                                          ; func call: факториал
    32 0000002C E831000000                      call ___func_1
    33                                          ; func call end
    34                                  
    35 00000031 4883EC08                        sub rsp, 8
    36 00000035 F20F110424                      movsd [rsp], xmm0
    37                                  
    38 0000003A F20F100424                      movsd xmm0, [rsp]
    39 0000003F 4883C408                        add rsp, 8
    40 00000043 E8D7020000                      call doubleio_out
    41                                  
    42 00000048 4883EC08                        sub rsp, 8
    43 0000004C BA00000000                      mov rdx, 0x0
    44 00000051 48891424                        mov qword [rsp], rdx
    45 00000055 F20F100424                      movsd xmm0, [rsp]
    46 0000005A 4883C408                        add rsp, 8
    47 0000005E C9                              leave
    48 0000005F C3                              ret
    49                                  
    50 00000060 C9                              leave
    51 00000061 C3                              ret
    52                                  ; ------------------------- Function definition end -----------------------
    53                                  
    54                                  
    55                                  ; =========================== Function definition =========================
    56                                  ; func name: факториал
    57                                  ___func_1:
    58 00000062 C8080000                        enter 0x0008, 0; this place is patched in the end of function definition
    59                                  
    60 00000066 FF75F8                          push qword [rbp - 8 - 0]
    61 00000069 4883EC08                        sub rsp, 8
    62 0000006D 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
    62 00000076 3F                 
    63 00000077 48891424                        mov qword [rsp], rdx
    64                                          ; operands comparison: op1 > op2
    65 0000007B F20F101424                      movsd xmm2, [rsp]
    66 00000080 F20F104C2408                    movsd xmm1, [rsp + 8]
    67 00000086 4883C408                        add rsp, 8
    68 0000008A F20F10D9                        movsd xmm3, xmm1
    69 0000008E F20F5CDA                        subsd xmm3, xmm2
    70 00000092 F20F111C24                      movsd [rsp], xmm3
    71 00000097 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
    71 000000A0 7F                 
    72 000000A1 48211424                        and qword [rsp], rdx
    73 000000A5 F20F101C24                      movsd xmm3, [rsp]
    74 000000AA 4883EC08                        sub rsp, 8
    75 000000AE 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
    75 000000B7 3E                 
    76 000000B8 48891424                        mov qword [rsp], rdx
    77 000000BC F20F102424                      movsd xmm4, [rsp]
    78 000000C1 4883C408                        add rsp, 8
    79                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
    80                                  
    81 000000C5 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
    82 000000C9 721A                            jc ___compare_1_false
    83                                  
    84 000000CB 660F2FCA                        comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
    85 000000CF 7214                            jc ___compare_1_false
    86                                  
    87 000000D1 4883EC08                        sub rsp, 8
    88 000000D5 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
    88 000000DE 3F                 
    89 000000DF 48891424                        mov qword [rsp], rdx
    90 000000E3 EB0D                            jmp ___compare_1_end
    91                                  
    92                                  ___compare_1_false:
    93 000000E5 4883EC08                        sub rsp, 8
    94 000000E9 BA00000000                      mov rdx, 0x0
    95 000000EE 48891424                        mov qword [rsp], rdx
    96                                  ___compare_1_end:
    97                                  
    98                                          ; if begin
    99 000000F2 4883EC08                        sub rsp, 8
   100 000000F6 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   100 000000FF 3E                 
   101 00000100 48891424                        mov qword [rsp], rdx
   102 00000104 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   102 0000010D 7F                 
   103 0000010E 4821542408                      and qword [rsp + 8], rdx
   104 00000113 F20F104C2408                    movsd xmm1, [rsp + 8]
   105 00000119 F20F101424                      movsd xmm2, [rsp]
   106 0000011E 4883C410                        add rsp, 16
   107 00000122 660F2FCA                        comisd xmm1, xmm2
   108 00000126 7265                            jc ___if_5_end
   109 00000128 FF75F8                          push qword [rbp - 8 - 0]
   110 0000012B 4883EC08                        sub rsp, 8
   111 0000012F 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   111 00000138 3F                 
   112 00000139 48891424                        mov qword [rsp], rdx
   113 0000013D F20F101424                      movsd xmm2, [rsp]
   114 00000142 F20F104C2408                    movsd xmm1, [rsp + 8]
   115 00000148 4883C408                        add rsp, 8
   116 0000014C F20F5CCA                        subsd xmm1, xmm2
   117 00000150 F20F110C24                      movsd [rsp], xmm1
   118                                  
   119 00000155 8F4424E8                        pop qword [rsp - 8 - 16 - 0]
   120                                  
   121                                          ; func call: факториал
   122 00000159 E804FFFFFF                      call ___func_1
   123                                          ; func call end
   124                                  
   125 0000015E 4883EC08                        sub rsp, 8
   126 00000162 F20F110424                      movsd [rsp], xmm0
   127                                  
   128 00000167 FF75F8                          push qword [rbp - 8 - 0]
   129 0000016A F20F101424                      movsd xmm2, [rsp]
   130 0000016F F20F104C2408                    movsd xmm1, [rsp + 8]
   131 00000175 4883C408                        add rsp, 8
   132 00000179 F20F59CA                        mulsd xmm1, xmm2
   133 0000017D F20F110C24                      movsd [rsp], xmm1
   134                                  
   135 00000182 F20F100424                      movsd xmm0, [rsp]
   136 00000187 4883C408                        add rsp, 8
   137 0000018B C9                              leave
   138 0000018C C3                              ret
   139                                  
   140                                  ___if_5_end:
   141                                          ; if end
   142                                  
   143 0000018D 4883EC08                        sub rsp, 8
   144 00000191 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   144 0000019A 3F                 
   145 0000019B 48891424                        mov qword [rsp], rdx
   146 0000019F F20F100424                      movsd xmm0, [rsp]
   147 000001A4 4883C408                        add rsp, 8
   148 000001A8 C9                              leave
   149 000001A9 C3                              ret
   150                                  
   151 000001AA C9                              leave
   152 000001AB C3                              ret
   153                                  ; ------------------------- Function definition end -----------------------
   154                                  
   155                                  
   156                                          %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 000001AC B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 000001B1 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 000001B6 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 000001BE BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 000001C3 0F05                <1>                 syscall
    17                              <1> 
    18 000001C5 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 000001CD 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 000001D5 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 000001D7 B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 000001DC BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 000001E1 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 000001E9 BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 000001EE 0F05                <1>                 syscall
    27                              <1> 
    28 000001F0 4889C7              <1>                 mov rdi, rax
    29 000001F3 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 000001FB 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 00000203 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 00000207 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 0000020F 4D31C0              <1>                 xor r8, r8
    45 00000212 4D31C9              <1>                 xor r9, r9
    46 00000215 4D31D2              <1>                 xor r10, r10
    47 00000218 4831DB              <1>                 xor rbx, rbx
    48 0000021B 4831C0              <1>                 xor rax, rax
    49 0000021E 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 00000224 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 00000227 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 0000022D 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 00000234 7511                <1>                 jne .isPositive
    56 00000236 41B801000000        <1>                 mov r8, 1
    57 0000023C 48FFC6              <1>                 inc rsi
    58 0000023F 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 00000247 EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 00000249 49F7E3              <1>                 mul r11
    64 0000024C 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 00000250 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 00000253 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 00000256 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 00000259 7352                <1>                 jae .endBuf
    72                              <1> 
    73 0000025B 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 00000261 80FB30              <1>                 cmp bl, '0'
    76 00000264 7207                <1>                 jb .notDigit
    77                              <1> 
    78 00000266 80FB39              <1>                 cmp bl, '9'
    79 00000269 7702                <1>                 ja .notDigit
    80                              <1> 
    81 0000026B EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 0000026D 80FB2E              <1>                 cmp bl, '.'
    85 00000270 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 00000272 80FB0A              <1>                 cmp bl, 0x0a
    88 00000275 741A                <1>                 je .endLine
    89                              <1> 
    90 00000277 EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 00000279 4D85C9              <1>                 test r9, r9
    94 0000027C 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 0000027E 41B901000000        <1>                 mov r9, 1
    97 00000284 48FFC6              <1>                 inc rsi
    98 00000287 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 0000028F EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 00000291 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 00000299 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 0000029B 48FFC6              <1>                 inc rsi
   107 0000029E 4839FE              <1>                 cmp rsi, rdi
   108 000002A1 740A                <1>                 je .endBuf
   109                              <1> 
   110 000002A3 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 000002AB EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 000002AD 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 000002B5 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 000002B7 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 000002BF 00000000            <1>
   118 000002C3 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 000002CB 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 000002CF 4D85C0              <1>                 test r8, r8
   122 000002D2 7403                <1>                 je .isPositive2
   123                              <1> 
   124 000002D4 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 000002D7 F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 000002DC B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 000002E1 EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 000002E3 49FFCA              <1>                 dec r10
   134 000002E6 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 000002E9 4D85D2              <1>                 test r10, r10
   138 000002EC 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 000002EE F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 000002F3 F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 000002F7 C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 000002F8 B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 000002FD BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 00000302 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 0000030A BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 0000030F 0F05                <1>                 syscall
   152                              <1> 
   153 00000311 B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 00000316 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 0000031D 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 0000031F 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 00000327 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 0000032C 49FFCD              <1>                 dec r13
   171                              <1> 
   172 0000032F 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 00000334 4885DB              <1>                 test rbx, rbx
   174 00000337 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 00000339 F30F7EC8            <1>                 movq xmm1, xmm0
   177 0000033D 660FEFC0            <1>                 pxor xmm0, xmm0
   178 00000341 F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 00000345 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 0000034A F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 0000034F F20F5CC1            <1>                 subsd xmm0, xmm1
   184 00000353 F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 00000358 [10000000]          <1>
   185 0000035C F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 00000361 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 00000367 B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 0000036C 4831D2              <1>                 xor rdx, rdx
   192 0000036F 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 00000372 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 00000378 41885500            <1>                 mov byte [r13], dl
   198 0000037C 49FFCD              <1>                 dec r13
   199 0000037F 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 00000382 4885C9              <1>                 test rcx,rcx
   202 00000385 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 00000387 41C645002E          <1>                 mov byte [r13], '.'
   205 0000038C 49FFCD              <1>                 dec r13
   206                              <1> 
   207 0000038F 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 00000392 4831D2              <1>                 xor rdx, rdx
   212 00000395 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 00000398 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 0000039E 41885500            <1>                 mov byte [r13], dl
   218 000003A2 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000003A5 85C0                <1>                 test eax, eax
   221 000003A7 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 000003A9 4885DB              <1>                 test rbx, rbx
   224 000003AC 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 000003AE 41C645002D          <1>                 mov byte [r13], '-'
   227 000003B3 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 000003B6 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 000003B8 [3F00000000000000]  <1>
   231 000003C0 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 000003C3 49FFC5              <1>                 inc r13
   234                              <1> 
   235 000003C6 B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 000003CB BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 000003D0 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 000003D3 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 000003D6 0F05                <1>                 syscall
   240                              <1> 
   241 000003D8 C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   157                                  
   158                                  section .data
   159                                  
   160                                  GLOBAL_SECTION: times 0 dq 0
   161                                  
   162                                  section .rodata
   163                                  
   164 0000003B 256C670A00              PRINTF_DOUBLE_FMT: db '%', 'l', 'g', 0x0a, 0
   165 00000040 256C6600                SCANF_DOUBLE_FMT:  db '%', 'l', 'f', 0
