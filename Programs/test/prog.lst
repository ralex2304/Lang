     1                                  ___ir_block_1:
     2                                  %include "doubleiolib.nasm"
     1                              <1> section .rodata
     2 00000000 494F4C4942474F54    <1> GOT_SIGNATURE:  dq "IOLIBGOT"
     3 00000008 0000000000000000    <1> GOT:            dq TEXT_BEGIN - doubleio_in
     4 00000010 8DFEFFFFFFFFFFFF    <1>                 dq TEXT_BEGIN - doubleio_out
     5                              <1> 
     6                              <1> section .text
     7                              <1> 
     8                              <1> TEXT_BEGIN:
     9                              <1> 
    10                              <1> ;-------------------------------------------------
    11                              <1> ; read double
    12                              <1> ;
    13                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
    14                              <1> ;
    15                              <1> ; Ret:      xmm0
    16                              <1> ;-------------------------------------------------
    17                              <1> doubleio_in:
    18                              <1> 
    19 00000000 B801000000          <1>                 mov rax, 0x01               ; sys_write
    20 00000005 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    21 0000000A 488D3425[30000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    22 00000012 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    23 00000017 0F05                <1>                 syscall
    24                              <1> 
    25 00000019 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    26 00000021 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    27 00000029 7230                <1>                 jb .bufIsNotEmpty
    28                              <1> 
    29 0000002B B800000000          <1>                 mov rax, 0x00               ; sys_read
    30 00000030 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    31 00000035 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    32 0000003D BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    33 00000042 0F05                <1>                 syscall
    34                              <1> 
    35 00000044 4889C7              <1>                 mov rdi, rax
    36 00000047 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    37 0000004F 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    37 00000057 00000000            <1>
    38                              <1> 
    39                              <1> .bufIsNotEmpty:
    40 0000005B 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    41                              <1> 
    42                              <1>                 ; rdi  - buf len
    43                              <1>                 ; rsi  - buf pos
    44                              <1>                 ; rbx  - cur symbol
    45                              <1>                 ; r8   - is negative
    46                              <1>                 ; r9   - is after floating point
    47                              <1>                 ; r10  - exp10
    48                              <1>                 ; r11  = 10
    49                              <1>                 ; rax  - number
    50                              <1> 
    51 00000063 4D31C0              <1>                 xor r8, r8
    52 00000066 4D31C9              <1>                 xor r9, r9
    53 00000069 4D31D2              <1>                 xor r10, r10
    54 0000006C 4831DB              <1>                 xor rbx, rbx
    55 0000006F 4831C0              <1>                 xor rax, rax
    56 00000072 41BB0A000000        <1>                 mov r11, 10
    57                              <1> 
    58 00000078 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    59 0000007B 0F83CB000000        <1>                 jae .error
    60                              <1> 
    61 00000081 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    62 00000088 7511                <1>                 jne .isPositive
    63 0000008A 41B801000000        <1>                 mov r8, 1
    64 00000090 48FFC6              <1>                 inc rsi
    65 00000093 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    66                              <1> 
    67                              <1> .isPositive:
    68 0000009B EB0D                <1>                 jmp .whileClause
    69                              <1> .whileBody:
    70 0000009D 49F7E3              <1>                 mul r11
    71 000000A0 488D43D0            <1>                 lea rax, [rbx - '0']
    72                              <1> 
    73 000000A4 4D01CA              <1>                 add r10, r9 ; inc exp10
    74 000000A7 48FFC6              <1>                 inc rsi
    75                              <1> 
    76                              <1> .whileClause:
    77 000000AA 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    78 000000AD 7352                <1>                 jae .endBuf
    79                              <1> 
    80 000000AF 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    81                              <1> 
    82 000000B5 80FB30              <1>                 cmp bl, '0'
    83 000000B8 7207                <1>                 jb .notDigit
    84                              <1> 
    85 000000BA 80FB39              <1>                 cmp bl, '9'
    86 000000BD 7702                <1>                 ja .notDigit
    87                              <1> 
    88 000000BF EBDC                <1>                 jmp .whileBody
    89                              <1> 
    90                              <1> .notDigit:
    91 000000C1 80FB2E              <1>                 cmp bl, '.'
    92 000000C4 7407                <1>                 je .floatingPoint
    93                              <1> 
    94 000000C6 80FB0A              <1>                 cmp bl, 0x0a
    95 000000C9 741A                <1>                 je .endLine
    96                              <1> 
    97 000000CB EB7F                <1>                 jmp .error
    98                              <1> 
    99                              <1> .floatingPoint:
   100 000000CD 4D85C9              <1>                 test r9, r9
   101 000000D0 757A                <1>                 jne .error ; several floating points in one number
   102                              <1> 
   103 000000D2 41B901000000        <1>                 mov r9, 1
   104 000000D8 48FFC6              <1>                 inc rsi
   105 000000DB 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
   106                              <1> 
   107 000000E3 EBC5                <1>                 jmp .whileClause
   108                              <1> 
   109                              <1> .endLine:
   110 000000E5 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   111 000000ED 745D                <1>                 je .error ; empty input
   112                              <1> 
   113 000000EF 48FFC6              <1>                 inc rsi
   114 000000F2 4839FE              <1>                 cmp rsi, rdi
   115 000000F5 740A                <1>                 je .endBuf
   116                              <1> 
   117 000000F7 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   118 000000FF EB22                <1>                 jmp .writeAns
   119                              <1> 
   120                              <1> .endBuf:
   121 00000101 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   122 00000109 7441                <1>                 je .error ; empty input
   123                              <1> 
   124 0000010B 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   124 00000113 00000000            <1>
   125 00000117 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   125 0000011F 00000000            <1>
   126                              <1> 
   127                              <1> .writeAns:
   128 00000123 4D85C0              <1>                 test r8, r8
   129 00000126 7403                <1>                 je .isPositive2
   130                              <1> 
   131 00000128 48F7D8              <1>                 neg rax
   132                              <1> 
   133                              <1> .isPositive2:
   134 0000012B F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   135                              <1> 
   136 00000130 B801000000          <1>                 mov rax, 1
   137                              <1> 
   138 00000135 EB06                <1>                 jmp .forExpClause
   139                              <1> .forExpBody:
   140 00000137 49FFCA              <1>                 dec r10
   141 0000013A 49F7E3              <1>                 mul r11
   142                              <1> 
   143                              <1> .forExpClause:
   144 0000013D 4D85D2              <1>                 test r10, r10
   145 00000140 75F5                <1>                 jne .forExpBody
   146                              <1> 
   147 00000142 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   148                              <1> 
   149 00000147 F20F5EC1            <1>                 divsd xmm0, xmm1
   150                              <1> 
   151 0000014B C3                  <1>                 ret
   152                              <1> 
   153                              <1> .error:
   154 0000014C B801000000          <1>                 mov rax, 0x01           ; sys_write
   155 00000151 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   156 00000156 488D3425[3E000000]  <1>                 lea rsi, [InputError]   ; string
   157 0000015E BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   158 00000163 0F05                <1>                 syscall
   159                              <1> 
   160 00000165 B83C000000          <1>                 mov rax, 0x3c           ; exit
   161 0000016A 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   162 00000171 0F05                <1>                 syscall
   163                              <1> ;-------------------------------------------------
   164                              <1> 
   165                              <1> ;-------------------------------------------------
   166                              <1> ; print double
   167                              <1> ;
   168                              <1> ; Args:     xmm0 - number
   169                              <1> ;
   170                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   171                              <1> ;-------------------------------------------------
   172                              <1> doubleio_out:
   173                              <1> 
   174 00000173 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   175                              <1> 
   176 0000017B 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   177 00000180 49FFCD              <1>                 dec r13
   178                              <1> 
   179 00000183 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   180 00000188 4885DB              <1>                 test rbx, rbx
   181 0000018B 790C                <1>                 jns .isPositive ; xmm0 >= 0
   182                              <1> 
   183 0000018D F30F7EC8            <1>                 movq xmm1, xmm0
   184 00000191 660FEFC0            <1>                 pxor xmm0, xmm0
   185 00000195 F20F5CC1            <1>                 subsd xmm0, xmm1
   186                              <1> .isPositive:
   187                              <1> 
   188 00000199 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   189 0000019E F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   190 000001A3 F20F5CC1            <1>                 subsd xmm0, xmm1
   191 000001A7 F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   191 000001AC [28000000]          <1>
   192 000001B0 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   193                              <1> 
   194                              <1>                 ; convert non-int part
   195 000001B5 41BC0A000000        <1>                 mov r12d, 10    ; base
   196 000001BB B906000000          <1>                 mov rcx, 6      ; width
   197                              <1> .flWhileBody:
   198 000001C0 4831D2              <1>                 xor rdx, rdx
   199 000001C3 41F7F4              <1>                 div r12d
   200                              <1>                 ; eax = div
   201                              <1>                 ; edx = mod
   202                              <1> 
   203 000001C6 8A92[18000000]      <1>                 mov dl, HexTable[rdx]
   204 000001CC 41885500            <1>                 mov byte [r13], dl
   205 000001D0 49FFCD              <1>                 dec r13
   206 000001D3 48FFC9              <1>                 dec rcx
   207                              <1> 
   208 000001D6 4885C9              <1>                 test rcx,rcx
   209 000001D9 75E5                <1>                 jne .flWhileBody
   210                              <1> 
   211 000001DB 41C645002E          <1>                 mov byte [r13], '.'
   212 000001E0 49FFCD              <1>                 dec r13
   213                              <1> 
   214 000001E3 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   215                              <1> 
   216                              <1>                 ; convert int part
   217                              <1> .intWhileBody:
   218 000001E6 4831D2              <1>                 xor rdx, rdx
   219 000001E9 41F7F4              <1>                 div r12d
   220                              <1>                 ; eax = div
   221                              <1>                 ; edx = mod
   222                              <1> 
   223 000001EC 8A92[18000000]      <1>                 mov dl, HexTable[rdx]
   224 000001F2 41885500            <1>                 mov byte [r13], dl
   225 000001F6 49FFCD              <1>                 dec r13
   226                              <1> 
   227 000001F9 85C0                <1>                 test eax, eax
   228 000001FB 75E9                <1>                 jne .intWhileBody
   229                              <1> 
   230 000001FD 4885DB              <1>                 test rbx, rbx
   231 00000200 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   232                              <1> 
   233 00000202 41C645002D          <1>                 mov byte [r13], '-'
   234 00000207 49FFCD              <1>                 dec r13
   235                              <1> .isPositive2:
   236                              <1> 
   237 0000020A 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   237 0000020C [3F00000000000000]  <1>
   238 00000214 4D29EB              <1>                 sub r11, r13
   239                              <1> 
   240 00000217 49FFC5              <1>                 inc r13
   241                              <1> 
   242 0000021A B801000000          <1>                 mov rax, 0x01   ; sys_write
   243 0000021F BF01000000          <1>                 mov rdi, 0x01   ; stdout
   244 00000224 4C89EE              <1>                 mov rsi, r13    ; buffer
   245 00000227 4C89DA              <1>                 mov rdx, r11    ; buffer size
   246 0000022A 0F05                <1>                 syscall
   247                              <1> 
   248 0000022C C3                  <1>                 ret
   249                              <1> ;-------------------------------------------------
   250                              <1> 
   251                              <1> section .data
   252                              <1> 
   253                              <1> BufCapacity equ 64
   254                              <1> 
   255 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   256                              <1> 
   257 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   258 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   259 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   260                              <1> 
   261                              <1> section .rodata
   262                              <1> 
   263 00000018 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   263 00000021 39616263646566      <1>
   264 00000028 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   265                              <1> 
   266 00000030 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   266 00000039 626C653A20          <1>
   267                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   268                              <1> 
   269 0000003E 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   269 00000047 75742E204578697469- <1>
   269 00000050 6E670A              <1>
   270                              <1> InputErrorLen       equ $ - InputError
     3                                  
     4                                  section .data
     5                                  
     6                                  GLOBAL_SECTION: times 0 dq 0
     7                                  
     8                                  section .rodata
     9                                  
    10 00000053 90<rep 5h>              align 8
    11 00000058 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d ; 1e-06
    12                                  align 16
    13 00000060 FFFFFFFFFFFFFF7F00-     DOUBLE_NEG_CONST: dq -1 >> 1, 0
    13 00000069 00000000000000     
    14                                  
    15                                  ; Program start
    16                                  
    17                                  section .text
    18                                  
    19                                  global _start
    20                                  
    21                                  _start:
    22 0000022D C8000000                                enter 0, 0
    23                                  ___ir_block_2:
    24 00000231 E80D000000                              call ___func_4
    25                                                  ; func call end
    26                                  
    27                                  ___ir_block_3:
    28 00000236 C9                                      leave
    29 00000237 B83C000000                              mov rax, 0x3c
    30 0000023C F2480F2CF8                              cvttsd2si rdi, xmm0
    31 00000241 0F05                                    syscall
    32                                  
    33                                  ___ir_block_4:
    34                                  ; =========================== Function definition =========================
    35                                  ___func_4:
    36 00000243 C8580000                                enter 88, 0
    37                                  
    38                                  ___ir_block_5:
    39 00000247 4883EC08                                sub rsp, 8
    40 0000024B BA00000000                              mov rdx, 0x0 ; 0
    41 00000250 48891424                                mov qword [rsp], rdx
    42                                  ___ir_block_6:
    43 00000254 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
    44                                  ___ir_block_7:
    45 00000258 488B1424                                mov rdx, [rsp]
    46 0000025C 4883C408                                add rsp, 8
    47 00000260 488911                                  mov qword [rcx], rdx
    48                                  ___ir_block_8:
    49 00000263 4883EC08                                sub rsp, 8
    50 00000267 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
    50 00000270 3F                 
    51 00000271 48891424                                mov qword [rsp], rdx
    52                                  ___ir_block_9:
    53 00000275 488D4DF0                                lea rcx, qword [rbp - 8 - 8]
    54                                  ___ir_block_10:
    55 00000279 488B1424                                mov rdx, [rsp]
    56 0000027D 4883C408                                add rsp, 8
    57 00000281 488911                                  mov qword [rcx], rdx
    58                                  ___ir_block_11:
    59 00000284 4883EC08                                sub rsp, 8
    60 00000288 48BA00000000000000-                     mov rdx, 0x4000000000000000 ; 2
    60 00000291 40                 
    61 00000292 48891424                                mov qword [rsp], rdx
    62                                  ___ir_block_12:
    63 00000296 488D4DE8                                lea rcx, qword [rbp - 8 - 16]
    64                                  ___ir_block_13:
    65 0000029A 488B1424                                mov rdx, [rsp]
    66 0000029E 4883C408                                add rsp, 8
    67 000002A2 488911                                  mov qword [rcx], rdx
    68                                  ___ir_block_14:
    69 000002A5 4883EC08                                sub rsp, 8
    70 000002A9 48BA00000000000008-                     mov rdx, 0x4008000000000000 ; 3
    70 000002B2 40                 
    71 000002B3 48891424                                mov qword [rsp], rdx
    72                                  ___ir_block_15:
    73 000002B7 488D4DE0                                lea rcx, qword [rbp - 8 - 24]
    74                                  ___ir_block_16:
    75 000002BB 488B1424                                mov rdx, [rsp]
    76 000002BF 4883C408                                add rsp, 8
    77 000002C3 488911                                  mov qword [rcx], rdx
    78                                  ___ir_block_17:
    79 000002C6 4883EC08                                sub rsp, 8
    80 000002CA 48BA00000000000010-                     mov rdx, 0x4010000000000000 ; 4
    80 000002D3 40                 
    81 000002D4 48891424                                mov qword [rsp], rdx
    82                                  ___ir_block_18:
    83 000002D8 488D4DD8                                lea rcx, qword [rbp - 8 - 32]
    84                                  ___ir_block_19:
    85 000002DC 488B1424                                mov rdx, [rsp]
    86 000002E0 4883C408                                add rsp, 8
    87 000002E4 488911                                  mov qword [rcx], rdx
    88                                  ___ir_block_20:
    89 000002E7 4883EC08                                sub rsp, 8
    90 000002EB 48BA00000000000014-                     mov rdx, 0x4014000000000000 ; 5
    90 000002F4 40                 
    91 000002F5 48891424                                mov qword [rsp], rdx
    92                                  ___ir_block_21:
    93 000002F9 488D4DD0                                lea rcx, qword [rbp - 8 - 40]
    94                                  ___ir_block_22:
    95 000002FD 488B1424                                mov rdx, [rsp]
    96 00000301 4883C408                                add rsp, 8
    97 00000305 488911                                  mov qword [rcx], rdx
    98                                  ___ir_block_23:
    99 00000308 4883EC08                                sub rsp, 8
   100 0000030C 48BA00000000000018-                     mov rdx, 0x4018000000000000 ; 6
   100 00000315 40                 
   101 00000316 48891424                                mov qword [rsp], rdx
   102                                  ___ir_block_24:
   103 0000031A 488D4DC8                                lea rcx, qword [rbp - 8 - 48]
   104                                  ___ir_block_25:
   105 0000031E 488B1424                                mov rdx, [rsp]
   106 00000322 4883C408                                add rsp, 8
   107 00000326 488911                                  mov qword [rcx], rdx
   108                                  ___ir_block_26:
   109                                  ___ir_block_27:
   110 00000329 BA00000000                              mov rdx, 0x0 ; 0
   111 0000032E 488955A8                                mov qword [rbp - 8 - 80], rdx
   112                                  ___ir_block_28:
   113                                  ___ir_block_29:
   114 00000332 4883EC08                                sub rsp, 8
   115 00000336 488B55A8                                mov rdx, qword [rbp - 8 - 80]
   116 0000033A 48891424                                mov qword [rsp], rdx
   117                                  ___ir_block_30:
   118 0000033E 4883EC08                                sub rsp, 8
   119 00000342 488B55A8                                mov rdx, qword [rbp - 8 - 80]
   120 00000346 48891424                                mov qword [rsp], rdx
   121                                  ___ir_block_31:
   122 0000034A 4883EC08                                sub rsp, 8
   123 0000034E 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   123 00000357 3F                 
   124 00000358 48891424                                mov qword [rsp], rdx
   125                                  ___ir_block_32:
   126 0000035C F30F7E442408                            movq xmm0, [rsp + 8]
   127 00000362 F20F580424                              addsd xmm0, qword [rsp]
   128 00000367 4883C410                                add rsp, 16
   129 0000036B 660FD645A8                              movq qword [rbp - 8 - 80], xmm0
   130                                  ___ir_block_33:
   131                                  ___ir_block_34:
   132 00000370 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
   133                                  ___ir_block_35:
   134 00000374 F2480F2D1424                            cvtsd2si rdx, [rsp]
   135 0000037A 4883C408                                add rsp, 8
   136 0000037E 48C1E203                                shl rdx, 3
   137 00000382 4829D1                                  sub rcx, rdx
   138                                  ___ir_block_36:
   139                                  ___ir_block_37:
   140                                  ___ir_block_38:
   141                                                  ; operands comparison: op1 < op2
   142 00000385 F30F7E09                                movq xmm1, qword [rcx]
   143 00000389 48BA00000000000014-                     mov rdx, 0x4014000000000000
   143 00000392 40                 
   144 00000393 66480F6ED2                              movq xmm2, rdx
   145 00000398 4883C4F8                                add rsp, 18446744073709551608
   146 0000039C F30F7ED9                                movq xmm3, xmm1
   147 000003A0 F20F5CDA                                subsd xmm3, xmm2
   148 000003A4 660F541C25-                             andpd xmm3, [DOUBLE_NEG_CONST]
   148 000003A9 [60000000]         
   149                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   150                                  
   151 000003AD 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   151 000003B2 [58000000]         
   152 000003B6 7212                                    jc ___compare_38_false
   153                                  
   154 000003B8 660F2FCA                                comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
   155 000003BC 730C                                    jnc ___compare_38_false
   156                                  
   157 000003BE 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   157 000003C7 3F                 
   158 000003C8 EB05                                    jmp ___compare_38_end
   159                                  
   160                                  ___compare_38_false:
   161 000003CA BA00000000                              mov rdx, 0x0 ; 0
   162                                  ___compare_38_end:
   163 000003CF 48891424                                mov qword [rsp], rdx
   164                                  
   165                                  ___ir_block_39:
   166 000003D3 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   166 000003DC 7F                 
   167 000003DD 48211424                                and qword [rsp], rdx
   168 000003E1 F30F7E0C24                              movq xmm1, qword [rsp]
   169 000003E6 4883C408                                add rsp, 8
   170 000003EA 660F2F0C25-                             comisd xmm1, [EPSILON]
   170 000003EF [58000000]         
   171                                  ___ir_block_40:
   172 000003F3 722F                                    jc ___ir_block_47
   173                                  ___ir_block_41:
   174 000003F5 4883EC08                                sub rsp, 8
   175 000003F9 488B55A8                                mov rdx, qword [rbp - 8 - 80]
   176 000003FD 48891424                                mov qword [rsp], rdx
   177                                  ___ir_block_42:
   178 00000401 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
   179                                  ___ir_block_43:
   180 00000405 F2480F2D1424                            cvtsd2si rdx, [rsp]
   181 0000040B 4883C408                                add rsp, 8
   182 0000040F 48C1E203                                shl rdx, 3
   183 00000413 4829D1                                  sub rcx, rdx
   184                                  ___ir_block_44:
   185                                  ___ir_block_45:
   186 00000416 F30F7E01                                movq xmm0, qword [rcx]
   187 0000041A E854FDFFFF                              call doubleio_out
   188                                  ___ir_block_46:
   189 0000041F E90EFFFFFF                              jmp ___ir_block_28
   190                                  ___ir_block_47:
   191                                  ___ir_block_48:
   192 00000424 C9                                      leave
   193 00000425 660FEFC0                                pxor xmm0, xmm0
   194 00000429 C3                                      ret
   195                                  ; ------------------------- Function definition end -----------------------
   196                                  
   197                                  
