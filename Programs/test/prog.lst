     1                                  ; Program start
     2                                  
     3                                  section .text
     4                                  
     5                                  extern printf
     6                                  extern scanf
     7                                  global main
     8                                  
     9                                  main:
    10 00000000 C8000000                        enter 0, 0
    11                                          ; func call: министерство
    12 00000004 E807000000                      call ___func_0
    13                                          ; func call end
    14                                  
    15 00000009 C9                              leave
    16 0000000A B800000000                      mov rax, 0
    17 0000000F C3                              ret
    18                                  
    19                                  ; =========================== Function definition =========================
    20                                  ; func name: министерство
    21                                  ___func_0:
    22 00000010 C8580000                        enter 0x0058, 0; this place is patched in the end of function definition
    23                                  
    24 00000014 4883EC08                        sub rsp, 8
    25 00000018 BA00000000                      mov rdx, 0x0
    26 0000001D 48891424                        mov qword [rsp], rdx
    27 00000021 488D4DF8                        lea rcx, [rbp - 8 - 0]
    28 00000025 8F01                            pop qword [rcx]
    29                                  
    30 00000027 4883EC08                        sub rsp, 8
    31 0000002B 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
    31 00000034 3F                 
    32 00000035 48891424                        mov qword [rsp], rdx
    33 00000039 488D4DF0                        lea rcx, [rbp - 8 - 8]
    34 0000003D 8F01                            pop qword [rcx]
    35                                  
    36 0000003F 4883EC08                        sub rsp, 8
    37 00000043 48BA00000000000000-             mov rdx, 0x4000000000000000
    37 0000004C 40                 
    38 0000004D 48891424                        mov qword [rsp], rdx
    39 00000051 488D4DE8                        lea rcx, [rbp - 8 - 16]
    40 00000055 8F01                            pop qword [rcx]
    41                                  
    42 00000057 4883EC08                        sub rsp, 8
    43 0000005B 48BA00000000000008-             mov rdx, 0x4008000000000000
    43 00000064 40                 
    44 00000065 48891424                        mov qword [rsp], rdx
    45 00000069 488D4DE0                        lea rcx, [rbp - 8 - 24]
    46 0000006D 8F01                            pop qword [rcx]
    47                                  
    48 0000006F 4883EC08                        sub rsp, 8
    49 00000073 48BA00000000000010-             mov rdx, 0x4010000000000000
    49 0000007C 40                 
    50 0000007D 48891424                        mov qword [rsp], rdx
    51 00000081 488D4DD8                        lea rcx, [rbp - 8 - 32]
    52 00000085 8F01                            pop qword [rcx]
    53                                  
    54 00000087 4883EC08                        sub rsp, 8
    55 0000008B 48BA00000000000014-             mov rdx, 0x4014000000000000
    55 00000094 40                 
    56 00000095 48891424                        mov qword [rsp], rdx
    57 00000099 488D4DD0                        lea rcx, [rbp - 8 - 40]
    58 0000009D 8F01                            pop qword [rcx]
    59                                  
    60 0000009F 4883EC08                        sub rsp, 8
    61 000000A3 48BA00000000000018-             mov rdx, 0x4018000000000000
    61 000000AC 40                 
    62 000000AD 48891424                        mov qword [rsp], rdx
    63 000000B1 488D4DC8                        lea rcx, [rbp - 8 - 48]
    64 000000B5 8F01                            pop qword [rcx]
    65                                  
    66 000000B7 4883EC08                        sub rsp, 8
    67 000000BB BA00000000                      mov rdx, 0x0
    68 000000C0 48891424                        mov qword [rsp], rdx
    69                                          ; var assignment: индекс
    70 000000C4 8F45A8                          pop qword [rbp - 8 - 80]
    71                                  
    72                                          ; while begin
    73                                  ___while_3_begin:
    74 000000C7 FF75A8                          push qword [rbp - 8 - 80]
    75                                          ; prepost oper
    76 000000CA FF75A8                          push qword [rbp - 8 - 80]
    77 000000CD 4883EC08                        sub rsp, 8
    78 000000D1 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
    78 000000DA 3F                 
    79 000000DB 48891424                        mov qword [rsp], rdx
    80 000000DF F20F101424                      movsd xmm2, [rsp]
    81 000000E4 F20F104C2408                    movsd xmm1, [rsp + 8]
    82 000000EA 4883C408                        add rsp, 8
    83 000000EE F20F58CA                        addsd xmm1, xmm2
    84 000000F2 F20F110C24                      movsd [rsp], xmm1
    85                                  
    86 000000F7 8F45A8                          pop qword [rbp - 8 - 80]
    87                                  
    88 000000FA 488D4DF8                        lea rcx, [rbp - 8 - 0]
    89 000000FE F2480F2D1424                    cvtsd2si rdx, [rsp]
    90 00000104 4883C408                        add rsp, 8
    91 00000108 48C1E203                        shl rdx, 3
    92 0000010C 4829D1                          sub rcx, rdx 
    93 0000010F FF31                            push qword [rcx]
    94 00000111 4883EC08                        sub rsp, 8
    95 00000115 48BA00000000000014-             mov rdx, 0x4014000000000000
    95 0000011E 40                 
    96 0000011F 48891424                        mov qword [rsp], rdx
    97 00000123 F20F101424                      movsd xmm2, [rsp]
    98 00000128 F20F104C2408                    movsd xmm1, [rsp + 8]
    99 0000012E 4883C410                        add rsp, 16
   100 00000132 660F2FCA                        comisd xmm1, xmm2
   101 00000136 720F                            jb ___compare_1_true
   102 00000138 4883EC08                        sub rsp, 8
   103 0000013C BA00000000                      mov rdx, 0x0
   104 00000141 48891424                        mov qword [rsp], rdx
   105 00000145 EB12                            jmp ___compare_1_end
   106                                  
   107                                  ___compare_1_true:
   108 00000147 4883EC08                        sub rsp, 8
   109 0000014B 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   109 00000154 3F                 
   110 00000155 48891424                        mov qword [rsp], rdx
   111                                  ___compare_1_end:
   112                                  
   113                                          ; while clause check
   114 00000159 4883EC08                        sub rsp, 8
   115 0000015D 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   115 00000166 3E                 
   116 00000167 48891424                        mov qword [rsp], rdx
   117 0000016B 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   117 00000174 7F                 
   118 00000175 4821542408                      and qword [rsp + 8], rdx
   119 0000017A F20F104C2408                    movsd xmm1, [rsp + 8]
   120 00000180 F20F101424                      movsd xmm2, [rsp]
   121 00000185 4883C410                        add rsp, 16
   122 00000189 660F2FCA                        comisd xmm1, xmm2
   123 0000018D 7251                            jc ___while_3_end
   124                                  
   125 0000018F FF75A8                          push qword [rbp - 8 - 80]
   126 00000192 488D4DF8                        lea rcx, [rbp - 8 - 0]
   127 00000196 F2480F2D1424                    cvtsd2si rdx, [rsp]
   128 0000019C 4883C408                        add rsp, 8
   129 000001A0 48C1E203                        shl rdx, 3
   130 000001A4 4829D1                          sub rcx, rdx 
   131 000001A7 FF31                            push qword [rcx]
   132                                          ; printf
   133 000001A9 488D3C25[00000000]              lea rdi, [PRINTF_DOUBLE_FMT]
   134 000001B1 F20F100424                      movsd xmm0, [rsp]
   135 000001B6 4883C408                        add rsp, 8
   136                                  
   137 000001BA BA0F000000                      mov rdx, 0x0F
   138 000001BF 4821E2                          and rdx, rsp
   139 000001C2 4885D2                          test rdx, rdx
   140 000001C5 740F                            je is_aligned_0
   141                                  
   142 000001C7 4883EC08                        sub rsp, 8
   143 000001CB E8(00000000)                    call printf
   144 000001D0 4883C408                        add rsp, 8
   145 000001D4 EB05                            jmp is_aligned_end_0
   146                                  
   147                                  is_aligned_0:
   148 000001D6 E8(00000000)                    call printf
   149                                  is_aligned_end_0:
   150                                  
   151 000001DB E9E7FEFFFF                      jmp ___while_3_begin
   152                                  
   153                                  ___while_3_end:
   154                                          ; while end
   155                                  
   156 000001E0 C9                              leave
   157 000001E1 C3                              ret
   158                                  ; ------------------------- Function definition end -----------------------
   159                                  
   160                                  
   161                                  section .data
   162                                  
   163                                  GLOBAL_SECTION: times 0 dq 0
   164                                  
   165                                  section .rodata
   166                                  
   167 00000000 256C670A00              PRINTF_DOUBLE_FMT: db '%', 'l', 'g', 0x0a, 0
   168 00000005 256C6600                SCANF_DOUBLE_FMT:  db '%', 'l', 'f', 0
