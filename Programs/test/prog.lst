     1                                  ; Program start
     2                                  
     3                                  section .text
     4                                  
     5                                  extern printf
     6                                  extern scanf
     7                                  global _start
     8                                  
     9                                  _start:
    10 00000000 C8000000                        enter 0, 0
    11                                          ; func call: министерство
    12 00000004 E80D000000                      call ___func_0
    13                                          ; func call end
    14                                  
    15 00000009 C9                              leave
    16 0000000A B83C000000                      mov rax, 0x3c
    17 0000000F F2480F2CF8                      cvttsd2si rdi, xmm0
    18 00000014 0F05                            syscall
    19                                  
    20                                  ; =========================== Function definition =========================
    21                                  ; func name: министерство
    22                                  ___func_0:
    23 00000016 C8580000                        enter 0x0058, 0; this place is patched in the end of function definition
    24                                  
    25 0000001A 4883EC08                        sub rsp, 8
    26 0000001E BA00000000                      mov rdx, 0x0
    27 00000023 48891424                        mov qword [rsp], rdx
    28 00000027 488D4DF8                        lea rcx, [rbp - 8 - 0]
    29 0000002B 8F01                            pop qword [rcx]
    30                                  
    31 0000002D 4883EC08                        sub rsp, 8
    32 00000031 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
    32 0000003A 3F                 
    33 0000003B 48891424                        mov qword [rsp], rdx
    34 0000003F 488D4DF0                        lea rcx, [rbp - 8 - 8]
    35 00000043 8F01                            pop qword [rcx]
    36                                  
    37 00000045 4883EC08                        sub rsp, 8
    38 00000049 48BA00000000000000-             mov rdx, 0x4000000000000000
    38 00000052 40                 
    39 00000053 48891424                        mov qword [rsp], rdx
    40 00000057 488D4DE8                        lea rcx, [rbp - 8 - 16]
    41 0000005B 8F01                            pop qword [rcx]
    42                                  
    43 0000005D 4883EC08                        sub rsp, 8
    44 00000061 48BA00000000000008-             mov rdx, 0x4008000000000000
    44 0000006A 40                 
    45 0000006B 48891424                        mov qword [rsp], rdx
    46 0000006F 488D4DE0                        lea rcx, [rbp - 8 - 24]
    47 00000073 8F01                            pop qword [rcx]
    48                                  
    49 00000075 4883EC08                        sub rsp, 8
    50 00000079 48BA00000000000010-             mov rdx, 0x4010000000000000
    50 00000082 40                 
    51 00000083 48891424                        mov qword [rsp], rdx
    52 00000087 488D4DD8                        lea rcx, [rbp - 8 - 32]
    53 0000008B 8F01                            pop qword [rcx]
    54                                  
    55 0000008D 4883EC08                        sub rsp, 8
    56 00000091 48BA00000000000014-             mov rdx, 0x4014000000000000
    56 0000009A 40                 
    57 0000009B 48891424                        mov qword [rsp], rdx
    58 0000009F 488D4DD0                        lea rcx, [rbp - 8 - 40]
    59 000000A3 8F01                            pop qword [rcx]
    60                                  
    61 000000A5 4883EC08                        sub rsp, 8
    62 000000A9 48BA00000000000018-             mov rdx, 0x4018000000000000
    62 000000B2 40                 
    63 000000B3 48891424                        mov qword [rsp], rdx
    64 000000B7 488D4DC8                        lea rcx, [rbp - 8 - 48]
    65 000000BB 8F01                            pop qword [rcx]
    66                                  
    67 000000BD 4883EC08                        sub rsp, 8
    68 000000C1 BA00000000                      mov rdx, 0x0
    69 000000C6 48891424                        mov qword [rsp], rdx
    70                                          ; var assignment: индекс
    71 000000CA 8F45A8                          pop qword [rbp - 8 - 80]
    72                                  
    73                                          ; while begin
    74                                  ___while_3_begin:
    75 000000CD FF75A8                          push qword [rbp - 8 - 80]
    76                                          ; prepost oper
    77 000000D0 FF75A8                          push qword [rbp - 8 - 80]
    78 000000D3 4883EC08                        sub rsp, 8
    79 000000D7 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
    79 000000E0 3F                 
    80 000000E1 48891424                        mov qword [rsp], rdx
    81 000000E5 F20F101424                      movsd xmm2, [rsp]
    82 000000EA F20F104C2408                    movsd xmm1, [rsp + 8]
    83 000000F0 4883C408                        add rsp, 8
    84 000000F4 F20F58CA                        addsd xmm1, xmm2
    85 000000F8 F20F110C24                      movsd [rsp], xmm1
    86                                  
    87 000000FD 8F45A8                          pop qword [rbp - 8 - 80]
    88                                  
    89 00000100 488D4DF8                        lea rcx, [rbp - 8 - 0]
    90 00000104 F2480F2D1424                    cvtsd2si rdx, [rsp]
    91 0000010A 4883C408                        add rsp, 8
    92 0000010E 48C1E203                        shl rdx, 3
    93 00000112 4829D1                          sub rcx, rdx 
    94 00000115 FF31                            push qword [rcx]
    95 00000117 4883EC08                        sub rsp, 8
    96 0000011B 48BA00000000000014-             mov rdx, 0x4014000000000000
    96 00000124 40                 
    97 00000125 48891424                        mov qword [rsp], rdx
    98                                          ; operands comparison: op1 < op2
    99 00000129 F20F101424                      movsd xmm2, [rsp]
   100 0000012E F20F104C2408                    movsd xmm1, [rsp + 8]
   101 00000134 4883C408                        add rsp, 8
   102 00000138 F20F10D9                        movsd xmm3, xmm1
   103 0000013C F20F5CDA                        subsd xmm3, xmm2
   104 00000140 F20F111C24                      movsd [rsp], xmm3
   105 00000145 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   105 0000014E 7F                 
   106 0000014F 48211424                        and qword [rsp], rdx
   107 00000153 F20F101C24                      movsd xmm3, [rsp]
   108 00000158 4883EC08                        sub rsp, 8
   109 0000015C 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   109 00000165 3E                 
   110 00000166 48891424                        mov qword [rsp], rdx
   111 0000016A F20F102424                      movsd xmm4, [rsp]
   112 0000016F 4883C408                        add rsp, 8
   113                                          ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2); xmm4 - EPSILON
   114                                  
   115 00000173 660F2FDC                        comisd xmm3, xmm4 ; fabs(op1 - op2) {'<' | '>'} EPSILON
   116 00000177 721A                            jc ___compare_1_false
   117                                  
   118 00000179 660F2FCA                        comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
   119 0000017D 7314                            jnc ___compare_1_false
   120                                  
   121 0000017F 4883EC08                        sub rsp, 8
   122 00000183 48BA000000000000F0-             mov rdx, 0x3ff0000000000000
   122 0000018C 3F                 
   123 0000018D 48891424                        mov qword [rsp], rdx
   124 00000191 EB0D                            jmp ___compare_1_end
   125                                  
   126                                  ___compare_1_false:
   127 00000193 4883EC08                        sub rsp, 8
   128 00000197 BA00000000                      mov rdx, 0x0
   129 0000019C 48891424                        mov qword [rsp], rdx
   130                                  ___compare_1_end:
   131                                  
   132                                          ; while clause check
   133 000001A0 4883EC08                        sub rsp, 8
   134 000001A4 48BA8DEDB5A0F7C6B0-             mov rdx, 0x3eb0c6f7a0b5ed8d
   134 000001AD 3E                 
   135 000001AE 48891424                        mov qword [rsp], rdx
   136 000001B2 48BAFFFFFFFFFFFFFF-             mov rdx, -1 >> 1 ; 0x7FFFFFFFFFFFFFFF
   136 000001BB 7F                 
   137 000001BC 4821542408                      and qword [rsp + 8], rdx
   138 000001C1 F20F104C2408                    movsd xmm1, [rsp + 8]
   139 000001C7 F20F101424                      movsd xmm2, [rsp]
   140 000001CC 4883C410                        add rsp, 16
   141 000001D0 660F2FCA                        comisd xmm1, xmm2
   142 000001D4 722D                            jc ___while_3_end
   143                                  
   144 000001D6 FF75A8                          push qword [rbp - 8 - 80]
   145 000001D9 488D4DF8                        lea rcx, [rbp - 8 - 0]
   146 000001DD F2480F2D1424                    cvtsd2si rdx, [rsp]
   147 000001E3 4883C408                        add rsp, 8
   148 000001E7 48C1E203                        shl rdx, 3
   149 000001EB 4829D1                          sub rcx, rdx 
   150 000001EE FF31                            push qword [rcx]
   151 000001F0 F20F100424                      movsd xmm0, [rsp]
   152 000001F5 4883C408                        add rsp, 8
   153 000001F9 E87A010000                      call doubleio_out
   154                                  
   155 000001FE E9CAFEFFFF                      jmp ___while_3_begin
   156                                  
   157                                  ___while_3_end:
   158                                          ; while end
   159                                  
   160 00000203 C9                              leave
   161 00000204 C3                              ret
   162                                  ; ------------------------- Function definition end -----------------------
   163                                  
   164                                  
   165                                          %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 00000205 B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 0000020A BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 0000020F 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 00000217 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 0000021C 0F05                <1>                 syscall
    17                              <1> 
    18 0000021E 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 00000226 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 0000022E 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 00000230 B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 00000235 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 0000023A 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 00000242 BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 00000247 0F05                <1>                 syscall
    27                              <1> 
    28 00000249 4889C7              <1>                 mov rdi, rax
    29 0000024C 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 00000254 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 0000025C 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 00000260 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 00000268 4D31C0              <1>                 xor r8, r8
    45 0000026B 4D31C9              <1>                 xor r9, r9
    46 0000026E 4D31D2              <1>                 xor r10, r10
    47 00000271 4831DB              <1>                 xor rbx, rbx
    48 00000274 4831C0              <1>                 xor rax, rax
    49 00000277 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 0000027D 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 00000280 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 00000286 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 0000028D 7511                <1>                 jne .isPositive
    56 0000028F 41B801000000        <1>                 mov r8, 1
    57 00000295 48FFC6              <1>                 inc rsi
    58 00000298 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 000002A0 EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 000002A2 49F7E3              <1>                 mul r11
    64 000002A5 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 000002A9 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 000002AC 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 000002AF 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 000002B2 7352                <1>                 jae .endBuf
    72                              <1> 
    73 000002B4 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 000002BA 80FB30              <1>                 cmp bl, '0'
    76 000002BD 7207                <1>                 jb .notDigit
    77                              <1> 
    78 000002BF 80FB39              <1>                 cmp bl, '9'
    79 000002C2 7702                <1>                 ja .notDigit
    80                              <1> 
    81 000002C4 EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 000002C6 80FB2E              <1>                 cmp bl, '.'
    85 000002C9 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 000002CB 80FB0A              <1>                 cmp bl, 0x0a
    88 000002CE 741A                <1>                 je .endLine
    89                              <1> 
    90 000002D0 EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 000002D2 4D85C9              <1>                 test r9, r9
    94 000002D5 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 000002D7 41B901000000        <1>                 mov r9, 1
    97 000002DD 48FFC6              <1>                 inc rsi
    98 000002E0 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 000002E8 EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 000002EA 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 000002F2 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 000002F4 48FFC6              <1>                 inc rsi
   107 000002F7 4839FE              <1>                 cmp rsi, rdi
   108 000002FA 740A                <1>                 je .endBuf
   109                              <1> 
   110 000002FC 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 00000304 EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 00000306 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 0000030E 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 00000310 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 00000318 00000000            <1>
   118 0000031C 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 00000324 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 00000328 4D85C0              <1>                 test r8, r8
   122 0000032B 7403                <1>                 je .isPositive2
   123                              <1> 
   124 0000032D 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 00000330 F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 00000335 B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 0000033A EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 0000033C 49FFCA              <1>                 dec r10
   134 0000033F 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 00000342 4D85D2              <1>                 test r10, r10
   138 00000345 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 00000347 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 0000034C F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 00000350 C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 00000351 B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 00000356 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 0000035B 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 00000363 BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 00000368 0F05                <1>                 syscall
   152                              <1> 
   153 0000036A B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 0000036F 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 00000376 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 00000378 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 00000380 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 00000385 49FFCD              <1>                 dec r13
   171                              <1> 
   172 00000388 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 0000038D 4885DB              <1>                 test rbx, rbx
   174 00000390 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 00000392 F30F7EC8            <1>                 movq xmm1, xmm0
   177 00000396 660FEFC0            <1>                 pxor xmm0, xmm0
   178 0000039A F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 0000039E F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 000003A3 F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 000003A8 F20F5CC1            <1>                 subsd xmm0, xmm1
   184 000003AC F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 000003B1 [10000000]          <1>
   185 000003B5 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 000003BA 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 000003C0 B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 000003C5 4831D2              <1>                 xor rdx, rdx
   192 000003C8 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 000003CB 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 000003D1 41885500            <1>                 mov byte [r13], dl
   198 000003D5 49FFCD              <1>                 dec r13
   199 000003D8 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 000003DB 4885C9              <1>                 test rcx,rcx
   202 000003DE 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 000003E0 41C645002E          <1>                 mov byte [r13], '.'
   205 000003E5 49FFCD              <1>                 dec r13
   206                              <1> 
   207 000003E8 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 000003EB 4831D2              <1>                 xor rdx, rdx
   212 000003EE 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 000003F1 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 000003F7 41885500            <1>                 mov byte [r13], dl
   218 000003FB 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000003FE 85C0                <1>                 test eax, eax
   221 00000400 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 00000402 4885DB              <1>                 test rbx, rbx
   224 00000405 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 00000407 41C645002D          <1>                 mov byte [r13], '-'
   227 0000040C 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 0000040F 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 00000411 [3F00000000000000]  <1>
   231 00000419 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 0000041C 49FFC5              <1>                 inc r13
   234                              <1> 
   235 0000041F B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 00000424 BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 00000429 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 0000042C 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 0000042F 0F05                <1>                 syscall
   240                              <1> 
   241 00000431 C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   166                                  
   167                                  section .data
   168                                  
   169                                  GLOBAL_SECTION: times 0 dq 0
   170                                  
   171                                  section .rodata
   172                                  
   173 0000003B 256C670A00              PRINTF_DOUBLE_FMT: db '%', 'l', 'g', 0x0a, 0
   174 00000040 256C6600                SCANF_DOUBLE_FMT:  db '%', 'l', 'f', 0
