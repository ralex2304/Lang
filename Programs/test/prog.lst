     1                                  ___ir_block_1:
     2                                  ; Program start
     3                                  
     4                                  section .text
     5                                  
     6                                  extern printf
     7                                  extern scanf
     8                                  global _start
     9                                  
    10                                  _start:
    11 00000000 C8000000                                enter 0, 0
    12                                  ___ir_block_2:
    13 00000004 E80D000000                              call ___func_4
    14                                                  ; func call end
    15                                  
    16                                  ___ir_block_3:
    17 00000009 C9                                      leave
    18 0000000A B83C000000                              mov rax, 0x3c
    19 0000000F F2480F2CF8                              cvttsd2si rdi, xmm0
    20 00000014 0F05                                    syscall
    21                                  
    22                                  ___ir_block_4:
    23                                  ; =========================== Function definition =========================
    24                                  ___func_4:
    25 00000016 C8580000                                enter 88, 0
    26                                  
    27                                  ___ir_block_5:
    28 0000001A 4883EC08                                sub rsp, 8
    29 0000001E BA00000000                              mov rdx, 0x0 ; 0
    30 00000023 48891424                                mov qword [rsp], rdx
    31                                  ___ir_block_6:
    32 00000027 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
    33                                  ___ir_block_7:
    34 0000002B 488B1424                                mov rdx, [rsp]
    35 0000002F 4883C408                                add rsp, 8
    36 00000033 488911                                  mov qword [rcx], rdx
    37                                  ___ir_block_8:
    38 00000036 4883EC08                                sub rsp, 8
    39 0000003A 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
    39 00000043 3F                 
    40 00000044 48891424                                mov qword [rsp], rdx
    41                                  ___ir_block_9:
    42 00000048 488D4DF0                                lea rcx, qword [rbp - 8 - 8]
    43                                  ___ir_block_10:
    44 0000004C 488B1424                                mov rdx, [rsp]
    45 00000050 4883C408                                add rsp, 8
    46 00000054 488911                                  mov qword [rcx], rdx
    47                                  ___ir_block_11:
    48 00000057 4883EC08                                sub rsp, 8
    49 0000005B 48BA00000000000000-                     mov rdx, 0x4000000000000000 ; 2
    49 00000064 40                 
    50 00000065 48891424                                mov qword [rsp], rdx
    51                                  ___ir_block_12:
    52 00000069 488D4DE8                                lea rcx, qword [rbp - 8 - 16]
    53                                  ___ir_block_13:
    54 0000006D 488B1424                                mov rdx, [rsp]
    55 00000071 4883C408                                add rsp, 8
    56 00000075 488911                                  mov qword [rcx], rdx
    57                                  ___ir_block_14:
    58 00000078 4883EC08                                sub rsp, 8
    59 0000007C 48BA00000000000008-                     mov rdx, 0x4008000000000000 ; 3
    59 00000085 40                 
    60 00000086 48891424                                mov qword [rsp], rdx
    61                                  ___ir_block_15:
    62 0000008A 488D4DE0                                lea rcx, qword [rbp - 8 - 24]
    63                                  ___ir_block_16:
    64 0000008E 488B1424                                mov rdx, [rsp]
    65 00000092 4883C408                                add rsp, 8
    66 00000096 488911                                  mov qword [rcx], rdx
    67                                  ___ir_block_17:
    68 00000099 4883EC08                                sub rsp, 8
    69 0000009D 48BA00000000000010-                     mov rdx, 0x4010000000000000 ; 4
    69 000000A6 40                 
    70 000000A7 48891424                                mov qword [rsp], rdx
    71                                  ___ir_block_18:
    72 000000AB 488D4DD8                                lea rcx, qword [rbp - 8 - 32]
    73                                  ___ir_block_19:
    74 000000AF 488B1424                                mov rdx, [rsp]
    75 000000B3 4883C408                                add rsp, 8
    76 000000B7 488911                                  mov qword [rcx], rdx
    77                                  ___ir_block_20:
    78 000000BA 4883EC08                                sub rsp, 8
    79 000000BE 48BA00000000000014-                     mov rdx, 0x4014000000000000 ; 5
    79 000000C7 40                 
    80 000000C8 48891424                                mov qword [rsp], rdx
    81                                  ___ir_block_21:
    82 000000CC 488D4DD0                                lea rcx, qword [rbp - 8 - 40]
    83                                  ___ir_block_22:
    84 000000D0 488B1424                                mov rdx, [rsp]
    85 000000D4 4883C408                                add rsp, 8
    86 000000D8 488911                                  mov qword [rcx], rdx
    87                                  ___ir_block_23:
    88 000000DB 4883EC08                                sub rsp, 8
    89 000000DF 48BA00000000000018-                     mov rdx, 0x4018000000000000 ; 6
    89 000000E8 40                 
    90 000000E9 48891424                                mov qword [rsp], rdx
    91                                  ___ir_block_24:
    92 000000ED 488D4DC8                                lea rcx, qword [rbp - 8 - 48]
    93                                  ___ir_block_25:
    94 000000F1 488B1424                                mov rdx, [rsp]
    95 000000F5 4883C408                                add rsp, 8
    96 000000F9 488911                                  mov qword [rcx], rdx
    97                                  ___ir_block_26:
    98                                  ___ir_block_27:
    99 000000FC BA00000000                              mov rdx, 0x0 ; 0
   100 00000101 488955A8                                mov qword [rbp - 8 - 80], rdx
   101                                  ___ir_block_28:
   102                                  ___ir_block_29:
   103 00000105 4883EC08                                sub rsp, 8
   104 00000109 488B55A8                                mov rdx, qword [rbp - 8 - 80]
   105 0000010D 48891424                                mov qword [rsp], rdx
   106                                  ___ir_block_30:
   107 00000111 4883EC08                                sub rsp, 8
   108 00000115 488B55A8                                mov rdx, qword [rbp - 8 - 80]
   109 00000119 48891424                                mov qword [rsp], rdx
   110                                  ___ir_block_31:
   111 0000011D 4883EC08                                sub rsp, 8
   112 00000121 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   112 0000012A 3F                 
   113 0000012B 48891424                                mov qword [rsp], rdx
   114                                  ___ir_block_32:
   115 0000012F F30F7E442408                            movq xmm0, [rsp + 8]
   116 00000135 F20F580424                              addsd xmm0, qword [rsp]
   117 0000013A 4883C410                                add rsp, 16
   118 0000013E 660FD645A8                              movq qword [rbp - 8 - 80], xmm0
   119                                  ___ir_block_33:
   120                                  ___ir_block_34:
   121 00000143 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
   122                                  ___ir_block_35:
   123 00000147 F2480F2D1424                            cvtsd2si rdx, [rsp]
   124 0000014D 4883C408                                add rsp, 8
   125 00000151 48C1E203                                shl rdx, 3
   126 00000155 4829D1                                  sub rcx, rdx
   127                                  ___ir_block_36:
   128                                  ___ir_block_37:
   129                                  ___ir_block_38:
   130                                                  ; operands comparison: op1 < op2
   131 00000158 F30F7E09                                movq xmm1, qword [rcx]
   132 0000015C 48BA00000000000014-                     mov rdx, 0x4014000000000000
   132 00000165 40                 
   133 00000166 66480F6ED2                              movq xmm2, rdx
   134 0000016B 4883C4F8                                add rsp, 18446744073709551608
   135 0000016F F30F7ED9                                movq xmm3, xmm1
   136 00000173 F20F5CDA                                subsd xmm3, xmm2
   137 00000177 660F541C25-                             andpd xmm3, [DOUBLE_NEG_CONST]
   137 0000017C [50000000]         
   138                                                  ; xmm1 - op1; xmm2 - op2; xmm3 - fabs(op1 - op2)
   139                                  
   140 00000180 660F2F1C25-                             comisd xmm3, [EPSILON] ; fabs(op1 - op2) {'<' | '>'} EPSILON
   140 00000185 [40000000]         
   141 00000189 7212                                    jc ___compare_38_false
   142                                  
   143 0000018B 660F2FCA                                comisd xmm1, xmm2 ; op1 {'<' | '>'} op2
   144 0000018F 730C                                    jnc ___compare_38_false
   145                                  
   146 00000191 48BA000000000000F0-                     mov rdx, 0x3ff0000000000000 ; 1
   146 0000019A 3F                 
   147 0000019B EB05                                    jmp ___compare_38_end
   148                                  
   149                                  ___compare_38_false:
   150 0000019D BA00000000                              mov rdx, 0x0 ; 0
   151                                  ___compare_38_end:
   152 000001A2 48891424                                mov qword [rsp], rdx
   153                                  
   154                                  ___ir_block_39:
   155 000001A6 48BAFFFFFFFFFFFFFF-                     mov rdx, -1 >> 1
   155 000001AF 7F                 
   156 000001B0 48211424                                and qword [rsp], rdx
   157 000001B4 F30F7E0C24                              movq xmm1, qword [rsp]
   158 000001B9 4883C408                                add rsp, 8
   159 000001BD 660F2F0C25-                             comisd xmm1, [EPSILON]
   159 000001C2 [40000000]         
   160                                  ___ir_block_40:
   161 000001C6 722F                                    jc ___ir_block_47
   162                                  ___ir_block_41:
   163 000001C8 4883EC08                                sub rsp, 8
   164 000001CC 488B55A8                                mov rdx, qword [rbp - 8 - 80]
   165 000001D0 48891424                                mov qword [rsp], rdx
   166                                  ___ir_block_42:
   167 000001D4 488D4DF8                                lea rcx, qword [rbp - 8 - 0]
   168                                  ___ir_block_43:
   169 000001D8 F2480F2D1424                            cvtsd2si rdx, [rsp]
   170 000001DE 4883C408                                add rsp, 8
   171 000001E2 48C1E203                                shl rdx, 3
   172 000001E6 4829D1                                  sub rcx, rdx
   173                                  ___ir_block_44:
   174                                  ___ir_block_45:
   175 000001E9 F30F7E01                                movq xmm0, qword [rcx]
   176 000001ED E87E010000                              call doubleio_out
   177                                  ___ir_block_46:
   178 000001F2 E90EFFFFFF                              jmp ___ir_block_28
   179                                  ___ir_block_47:
   180                                  ___ir_block_48:
   181 000001F7 C9                                      leave
   182 000001F8 660FEFC0                                pxor xmm0, xmm0
   183 000001FC C3                                      ret
   184                                  ; ------------------------- Function definition end -----------------------
   185                                  
   186                                  
   187                                  ___ir_block_49:
   188                                  %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 000001FD B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 00000202 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 00000207 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 0000020F BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 00000214 0F05                <1>                 syscall
    17                              <1> 
    18 00000216 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 0000021E 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 00000226 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 00000228 B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 0000022D BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 00000232 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 0000023A BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 0000023F 0F05                <1>                 syscall
    27                              <1> 
    28 00000241 4889C7              <1>                 mov rdi, rax
    29 00000244 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 0000024C 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 00000254 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 00000258 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 00000260 4D31C0              <1>                 xor r8, r8
    45 00000263 4D31C9              <1>                 xor r9, r9
    46 00000266 4D31D2              <1>                 xor r10, r10
    47 00000269 4831DB              <1>                 xor rbx, rbx
    48 0000026C 4831C0              <1>                 xor rax, rax
    49 0000026F 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 00000275 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 00000278 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 0000027E 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 00000285 7511                <1>                 jne .isPositive
    56 00000287 41B801000000        <1>                 mov r8, 1
    57 0000028D 48FFC6              <1>                 inc rsi
    58 00000290 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 00000298 EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 0000029A 49F7E3              <1>                 mul r11
    64 0000029D 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 000002A1 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 000002A4 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 000002A7 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 000002AA 7352                <1>                 jae .endBuf
    72                              <1> 
    73 000002AC 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 000002B2 80FB30              <1>                 cmp bl, '0'
    76 000002B5 7207                <1>                 jb .notDigit
    77                              <1> 
    78 000002B7 80FB39              <1>                 cmp bl, '9'
    79 000002BA 7702                <1>                 ja .notDigit
    80                              <1> 
    81 000002BC EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 000002BE 80FB2E              <1>                 cmp bl, '.'
    85 000002C1 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 000002C3 80FB0A              <1>                 cmp bl, 0x0a
    88 000002C6 741A                <1>                 je .endLine
    89                              <1> 
    90 000002C8 EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 000002CA 4D85C9              <1>                 test r9, r9
    94 000002CD 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 000002CF 41B901000000        <1>                 mov r9, 1
    97 000002D5 48FFC6              <1>                 inc rsi
    98 000002D8 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 000002E0 EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 000002E2 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 000002EA 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 000002EC 48FFC6              <1>                 inc rsi
   107 000002EF 4839FE              <1>                 cmp rsi, rdi
   108 000002F2 740A                <1>                 je .endBuf
   109                              <1> 
   110 000002F4 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 000002FC EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 000002FE 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 00000306 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 00000308 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 00000310 00000000            <1>
   118 00000314 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 0000031C 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 00000320 4D85C0              <1>                 test r8, r8
   122 00000323 7403                <1>                 je .isPositive2
   123                              <1> 
   124 00000325 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 00000328 F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 0000032D B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 00000332 EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 00000334 49FFCA              <1>                 dec r10
   134 00000337 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 0000033A 4D85D2              <1>                 test r10, r10
   138 0000033D 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 0000033F F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 00000344 F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 00000348 C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 00000349 B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 0000034E BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 00000353 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 0000035B BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 00000360 0F05                <1>                 syscall
   152                              <1> 
   153 00000362 B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 00000367 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 0000036E 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 00000370 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 00000378 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 0000037D 49FFCD              <1>                 dec r13
   171                              <1> 
   172 00000380 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 00000385 4885DB              <1>                 test rbx, rbx
   174 00000388 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 0000038A F30F7EC8            <1>                 movq xmm1, xmm0
   177 0000038E 660FEFC0            <1>                 pxor xmm0, xmm0
   178 00000392 F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 00000396 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 0000039B F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 000003A0 F20F5CC1            <1>                 subsd xmm0, xmm1
   184 000003A4 F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 000003A9 [10000000]          <1>
   185 000003AD F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 000003B2 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 000003B8 B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 000003BD 4831D2              <1>                 xor rdx, rdx
   192 000003C0 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 000003C3 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 000003C9 41885500            <1>                 mov byte [r13], dl
   198 000003CD 49FFCD              <1>                 dec r13
   199 000003D0 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 000003D3 4885C9              <1>                 test rcx,rcx
   202 000003D6 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 000003D8 41C645002E          <1>                 mov byte [r13], '.'
   205 000003DD 49FFCD              <1>                 dec r13
   206                              <1> 
   207 000003E0 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 000003E3 4831D2              <1>                 xor rdx, rdx
   212 000003E6 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 000003E9 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 000003EF 41885500            <1>                 mov byte [r13], dl
   218 000003F3 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000003F6 85C0                <1>                 test eax, eax
   221 000003F8 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 000003FA 4885DB              <1>                 test rbx, rbx
   224 000003FD 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 000003FF 41C645002D          <1>                 mov byte [r13], '-'
   227 00000404 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 00000407 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 00000409 [3F00000000000000]  <1>
   231 00000411 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 00000414 49FFC5              <1>                 inc r13
   234                              <1> 
   235 00000417 B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 0000041C BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 00000421 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 00000424 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 00000427 0F05                <1>                 syscall
   240                              <1> 
   241 00000429 C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   189                                  
   190                                  section .data
   191                                  
   192                                  GLOBAL_SECTION: times 0 dq 0
   193                                  
   194                                  section .rodata
   195                                  
   196 0000003B 90<rep 5h>              align 8
   197 00000040 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d ; 1e-06
   198 00000048 90<rep 8h>              align 16
   199 00000050 FFFFFFFFFFFFFF7F00-     DOUBLE_NEG_CONST: dq -1 >> 1, 0
   199 00000059 00000000000000     
   200                                  
