     1                                  ___ir_block_1:
     2                                  ; Program start
     3                                  
     4                                  section .text
     5                                  
     6                                  extern printf
     7                                  extern scanf
     8                                  global _start
     9                                  
    10                                  _start:
    11 00000000 C8000000                                enter 0, 0
    12                                  ___ir_block_2:
    13 00000004 E80D000000                              call ___func_4
    14                                                  ; func call end
    15                                  
    16                                  ___ir_block_3:
    17 00000009 C9                                      leave
    18 0000000A B83C000000                              mov rax, 0x3c
    19 0000000F F2480F2CF8                              cvttsd2si rdi, xmm0
    20 00000014 0F05                                    syscall
    21                                  
    22                                  ___ir_block_4:
    23                                  ; =========================== Function definition =========================
    24                                  ___func_4:
    25 00000016 C8100000                                enter 16, 0
    26                                  
    27                                  ___ir_block_5:
    28 0000001A 4883EC08                                sub rsp, 8
    29 0000001E 48BA00000000000014-                     mov rdx, 0x4014000000000000 ; 5
    29 00000027 40                 
    30 00000028 48891424                                mov qword [rsp], rdx
    31                                  ___ir_block_6:
    32 0000002C 488B1424                                mov rdx, [rsp]
    33 00000030 4883C408                                add rsp, 8
    34 00000034 488955F8                                mov qword [rbp - 8 - 0], rdx
    35                                  ___ir_block_7:
    36 00000038 4883EC08                                sub rsp, 8
    37 0000003C 488B55F8                                mov rdx, qword [rbp - 8 - 0]
    38 00000040 48891424                                mov qword [rsp], rdx
    39                                  ___ir_block_8:
    40 00000044 F20F100424                              movsd xmm0, qword [rsp]
    41 00000049 4883C408                                add rsp, 8
    42 0000004D E851020000                              call doubleio_out
    43                                  ___ir_block_9:
    44 00000052 4883EC08                                sub rsp, 8
    45 00000056 48BA00000000000024-                     mov rdx, 0x4024000000000000 ; 10
    45 0000005F 40                 
    46 00000060 48891424                                mov qword [rsp], rdx
    47                                  ___ir_block_10:
    48 00000064 488B1424                                mov rdx, [rsp]
    49 00000068 4883C408                                add rsp, 8
    50 0000006C 488955F0                                mov qword [rbp - 8 - 8], rdx
    51                                  ___ir_block_11:
    52 00000070 4883EC08                                sub rsp, 8
    53 00000074 488B55F0                                mov rdx, qword [rbp - 8 - 8]
    54 00000078 48891424                                mov qword [rsp], rdx
    55                                  ___ir_block_12:
    56 0000007C F20F100424                              movsd xmm0, qword [rsp]
    57 00000081 4883C408                                add rsp, 8
    58 00000085 E819020000                              call doubleio_out
    59                                  ___ir_block_13:
    60 0000008A 4883EC08                                sub rsp, 8
    61 0000008E 48BA00000000000024-                     mov rdx, 0x4024000000000000 ; 10
    61 00000097 40                 
    62 00000098 48891424                                mov qword [rsp], rdx
    63                                  ___ir_block_14:
    64 0000009C 4883EC08                                sub rsp, 8
    65 000000A0 488B55F0                                mov rdx, qword [rbp - 8 - 8]
    66 000000A4 48891424                                mov qword [rsp], rdx
    67                                  ___ir_block_15:
    68 000000A8 F20F104C2408                            movsd xmm1, [rsp + 8]
    69 000000AE F20F101424                              movsd xmm2, qword [rsp]
    70 000000B3 F20F11542408                            movsd [rsp + 8], xmm2
    71 000000B9 F20F110C24                              movsd qword [rsp], xmm1
    72                                  ___ir_block_16:
    73 000000BE F20F10442408                            movsd xmm0, [rsp + 8]
    74 000000C4 F20F580424                              addsd xmm0, qword [rsp]
    75 000000C9 4883C408                                add rsp, 8
    76 000000CD F20F110424                              movsd qword [rsp], xmm0
    77                                  ___ir_block_17:
    78 000000D2 488B1424                                mov rdx, [rsp]
    79 000000D6 4883C408                                add rsp, 8
    80 000000DA 488955F0                                mov qword [rbp - 8 - 8], rdx
    81                                  ___ir_block_18:
    82 000000DE 4883EC08                                sub rsp, 8
    83 000000E2 488B55F0                                mov rdx, qword [rbp - 8 - 8]
    84 000000E6 48891424                                mov qword [rsp], rdx
    85                                  ___ir_block_19:
    86 000000EA F20F100424                              movsd xmm0, qword [rsp]
    87 000000EF 4883C408                                add rsp, 8
    88 000000F3 E8AB010000                              call doubleio_out
    89                                  ___ir_block_20:
    90 000000F8 4883EC08                                sub rsp, 8
    91 000000FC 488B55F8                                mov rdx, qword [rbp - 8 - 0]
    92 00000100 48891424                                mov qword [rsp], rdx
    93                                  ___ir_block_21:
    94 00000104 F20F100424                              movsd xmm0, qword [rsp]
    95 00000109 4883C408                                add rsp, 8
    96 0000010D E891010000                              call doubleio_out
    97                                  ___ir_block_22:
    98 00000112 4883EC08                                sub rsp, 8
    99 00000116 BA00000000                              mov rdx, 0x0 ; 0
   100 0000011B 48891424                                mov qword [rsp], rdx
   101                                  ___ir_block_23:
   102 0000011F F20F100424                              movsd xmm0, [rsp]
   103 00000124 4883C408                                add rsp, 8
   104                                  ___ir_block_24:
   105 00000128 C9                                      leave
   106 00000129 C3                                      ret
   107                                  
   108                                  ___ir_block_25:
   109 0000012A C9                                      leave
   110 0000012B 660FEFC0                                pxor xmm0, xmm0
   111 0000012F C3                                      ret
   112                                  ; ------------------------- Function definition end -----------------------
   113                                  
   114                                  
   115                                  ___ir_block_26:
   116                                  %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 00000130 B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 00000135 BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 0000013A 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 00000142 BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 00000147 0F05                <1>                 syscall
    17                              <1> 
    18 00000149 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 00000151 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 00000159 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 0000015B B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 00000160 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 00000165 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 0000016D BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 00000172 0F05                <1>                 syscall
    27                              <1> 
    28 00000174 4889C7              <1>                 mov rdi, rax
    29 00000177 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 0000017F 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 00000187 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 0000018B 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 00000193 4D31C0              <1>                 xor r8, r8
    45 00000196 4D31C9              <1>                 xor r9, r9
    46 00000199 4D31D2              <1>                 xor r10, r10
    47 0000019C 4831DB              <1>                 xor rbx, rbx
    48 0000019F 4831C0              <1>                 xor rax, rax
    49 000001A2 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 000001A8 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 000001AB 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 000001B1 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 000001B8 7511                <1>                 jne .isPositive
    56 000001BA 41B801000000        <1>                 mov r8, 1
    57 000001C0 48FFC6              <1>                 inc rsi
    58 000001C3 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 000001CB EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 000001CD 49F7E3              <1>                 mul r11
    64 000001D0 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 000001D4 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 000001D7 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 000001DA 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 000001DD 7352                <1>                 jae .endBuf
    72                              <1> 
    73 000001DF 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 000001E5 80FB30              <1>                 cmp bl, '0'
    76 000001E8 7207                <1>                 jb .notDigit
    77                              <1> 
    78 000001EA 80FB39              <1>                 cmp bl, '9'
    79 000001ED 7702                <1>                 ja .notDigit
    80                              <1> 
    81 000001EF EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 000001F1 80FB2E              <1>                 cmp bl, '.'
    85 000001F4 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 000001F6 80FB0A              <1>                 cmp bl, 0x0a
    88 000001F9 741A                <1>                 je .endLine
    89                              <1> 
    90 000001FB EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 000001FD 4D85C9              <1>                 test r9, r9
    94 00000200 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 00000202 41B901000000        <1>                 mov r9, 1
    97 00000208 48FFC6              <1>                 inc rsi
    98 0000020B 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 00000213 EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 00000215 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 0000021D 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 0000021F 48FFC6              <1>                 inc rsi
   107 00000222 4839FE              <1>                 cmp rsi, rdi
   108 00000225 740A                <1>                 je .endBuf
   109                              <1> 
   110 00000227 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 0000022F EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 00000231 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 00000239 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 0000023B 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 00000243 00000000            <1>
   118 00000247 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 0000024F 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 00000253 4D85C0              <1>                 test r8, r8
   122 00000256 7403                <1>                 je .isPositive2
   123                              <1> 
   124 00000258 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 0000025B F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 00000260 B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 00000265 EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 00000267 49FFCA              <1>                 dec r10
   134 0000026A 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 0000026D 4D85D2              <1>                 test r10, r10
   138 00000270 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 00000272 F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 00000277 F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 0000027B C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 0000027C B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 00000281 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 00000286 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 0000028E BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 00000293 0F05                <1>                 syscall
   152                              <1> 
   153 00000295 B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 0000029A 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 000002A1 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 000002A3 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 000002AB 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 000002B0 49FFCD              <1>                 dec r13
   171                              <1> 
   172 000002B3 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 000002B8 4885DB              <1>                 test rbx, rbx
   174 000002BB 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 000002BD F30F7EC8            <1>                 movq xmm1, xmm0
   177 000002C1 660FEFC0            <1>                 pxor xmm0, xmm0
   178 000002C5 F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 000002C9 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 000002CE F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 000002D3 F20F5CC1            <1>                 subsd xmm0, xmm1
   184 000002D7 F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 000002DC [10000000]          <1>
   185 000002E0 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 000002E5 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 000002EB B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 000002F0 4831D2              <1>                 xor rdx, rdx
   192 000002F3 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 000002F6 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 000002FC 41885500            <1>                 mov byte [r13], dl
   198 00000300 49FFCD              <1>                 dec r13
   199 00000303 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 00000306 4885C9              <1>                 test rcx,rcx
   202 00000309 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 0000030B 41C645002E          <1>                 mov byte [r13], '.'
   205 00000310 49FFCD              <1>                 dec r13
   206                              <1> 
   207 00000313 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 00000316 4831D2              <1>                 xor rdx, rdx
   212 00000319 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 0000031C 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 00000322 41885500            <1>                 mov byte [r13], dl
   218 00000326 49FFCD              <1>                 dec r13
   219                              <1> 
   220 00000329 85C0                <1>                 test eax, eax
   221 0000032B 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 0000032D 4885DB              <1>                 test rbx, rbx
   224 00000330 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 00000332 41C645002D          <1>                 mov byte [r13], '-'
   227 00000337 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 0000033A 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 0000033C [3F00000000000000]  <1>
   231 00000344 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 00000347 49FFC5              <1>                 inc r13
   234                              <1> 
   235 0000034A B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 0000034F BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 00000354 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 00000357 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 0000035A 0F05                <1>                 syscall
   240                              <1> 
   241 0000035C C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
   117                                  
   118                                  section .data
   119                                  
   120                                  GLOBAL_SECTION: times 0 dq 0
   121                                  
   122                                  section .rodata
   123                                  
   124 0000003B 8DEDB5A0F7C6B03E        EPSILON: dq 0x3eb0c6f7a0b5ed8d ; 1e-06
   125                                  
