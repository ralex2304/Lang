     1                                  ; Program start
     2                                  
     3                                  section .text
     4                                  
     5                                  extern printf
     6                                  extern scanf
     7                                  global _start
     8                                  
     9                                  _start:
    10 00000000 C8000000                        enter 0, 0
    11                                          ; func call: остров_в_океане
    12 00000004 E80D000000                      call ___func_0
    13                                          ; func call end
    14                                  
    15 00000009 C9                              leave
    16 0000000A B83C000000                      mov rax, 0x3c
    17 0000000F F2480F2CF8                      cvttsd2si rdi, xmm0
    18 00000014 0F05                            syscall
    19                                  
    20                                  ; =========================== Function definition =========================
    21                                  ; func name: остров_в_океане
    22                                  ___func_0:
    23 00000016 C8100000                        enter 0x0010, 0; this place is patched in the end of function definition
    24                                  
    25 0000001A 4883EC08                        sub rsp, 8
    26 0000001E 48BA00000000000014-             mov rdx, 0x4014000000000000
    26 00000027 40                 
    27 00000028 48891424                        mov qword [rsp], rdx
    28                                          ; var assignment: переменная
    29 0000002C 8F45F8                          pop qword [rbp - 8 - 0]
    30                                  
    31                                          ; scope begin
    32 0000002F FF75F8                          push qword [rbp - 8 - 0]
    33 00000032 F20F100424                      movsd xmm0, [rsp]
    34 00000037 4883C408                        add rsp, 8
    35 0000003B E80B020000                      call doubleio_out
    36                                  
    37 00000040 4883EC08                        sub rsp, 8
    38 00000044 48BA00000000000024-             mov rdx, 0x4024000000000000
    38 0000004D 40                 
    39 0000004E 48891424                        mov qword [rsp], rdx
    40                                          ; var assignment: переменная
    41 00000052 8F45F0                          pop qword [rbp - 8 - 8]
    42                                  
    43 00000055 FF75F0                          push qword [rbp - 8 - 8]
    44 00000058 F20F100424                      movsd xmm0, [rsp]
    45 0000005D 4883C408                        add rsp, 8
    46 00000061 E8E5010000                      call doubleio_out
    47                                  
    48 00000066 4883EC08                        sub rsp, 8
    49 0000006A 48BA00000000000024-             mov rdx, 0x4024000000000000
    49 00000073 40                 
    50 00000074 48891424                        mov qword [rsp], rdx
    51 00000078 FF75F0                          push qword [rbp - 8 - 8]
    52                                          ; swap last stk vals
    53 0000007B 5A                              pop rdx
    54 0000007C 4158                            pop r8
    55 0000007E 52                              push rdx
    56 0000007F 4150                            push r8
    57                                  
    58 00000081 F20F101424                      movsd xmm2, [rsp]
    59 00000086 F20F104C2408                    movsd xmm1, [rsp + 8]
    60 0000008C 4883C408                        add rsp, 8
    61 00000090 F20F58CA                        addsd xmm1, xmm2
    62 00000094 F20F110C24                      movsd [rsp], xmm1
    63                                  
    64                                          ; var assignment: переменная
    65 00000099 8F45F0                          pop qword [rbp - 8 - 8]
    66                                  
    67 0000009C FF75F0                          push qword [rbp - 8 - 8]
    68 0000009F F20F100424                      movsd xmm0, [rsp]
    69 000000A4 4883C408                        add rsp, 8
    70 000000A8 E89E010000                      call doubleio_out
    71                                  
    72                                          ; scope end
    73 000000AD FF75F8                          push qword [rbp - 8 - 0]
    74 000000B0 F20F100424                      movsd xmm0, [rsp]
    75 000000B5 4883C408                        add rsp, 8
    76 000000B9 E88D010000                      call doubleio_out
    77                                  
    78 000000BE 4883EC08                        sub rsp, 8
    79 000000C2 BA00000000                      mov rdx, 0x0
    80 000000C7 48891424                        mov qword [rsp], rdx
    81 000000CB F20F100424                      movsd xmm0, [rsp]
    82 000000D0 4883C408                        add rsp, 8
    83 000000D4 C9                              leave
    84 000000D5 C3                              ret
    85                                  
    86 000000D6 C9                              leave
    87 000000D7 C3                              ret
    88                                  ; ------------------------- Function definition end -----------------------
    89                                  
    90                                  
    91                                          %include "doubleiolib.nasm"
     1                              <1> section .text
     2                              <1> 
     3                              <1> ;-------------------------------------------------
     4                              <1> ; read double
     5                              <1> ;
     6                              <1> ; Destr:    rax, rbx, rdx, rdi, rsi, r8, r9, r10, r11, xmm1
     7                              <1> ;
     8                              <1> ; Ret:      xmm0
     9                              <1> ;-------------------------------------------------
    10                              <1> doubleio_in:
    11                              <1> 
    12 000000D8 B801000000          <1>                 mov rax, 0x01               ; sys_write
    13 000000DD BF01000000          <1>                 mov rdi, 0x01               ; stdout
    14 000000E2 488D3425[18000000]  <1>                 lea rsi, [EnterDoubleStr]   ; string
    15 000000EA BA0E000000          <1>                 mov rdx, EnterDoubleStrLen  ; string len
    16 000000EF 0F05                <1>                 syscall
    17                              <1> 
    18 000000F1 488B3C25[80000000]  <1>                 mov rdi, [ReadBufferLen]
    19 000000F9 48393C25[88000000]  <1>                 cmp [ReadBufferPos], rdi
    20 00000101 7230                <1>                 jb .bufIsNotEmpty
    21                              <1> 
    22 00000103 B800000000          <1>                 mov rax, 0x00               ; sys_read
    23 00000108 BF00000000          <1>                 mov rdi, 0x00               ; stdin
    24 0000010D 488D3425[40000000]  <1>                 lea rsi, [ReadBuffer]       ; buffer
    25 00000115 BA40000000          <1>                 mov rdx, BufCapacity        ; buffer size
    26 0000011A 0F05                <1>                 syscall
    27                              <1> 
    28 0000011C 4889C7              <1>                 mov rdi, rax
    29 0000011F 48893C25[80000000]  <1>                 mov qword [ReadBufferLen], rdi
    30 00000127 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
    30 0000012F 00000000            <1>
    31                              <1> 
    32                              <1> .bufIsNotEmpty:
    33 00000133 488B3425[88000000]  <1>                 mov rsi, [ReadBufferPos]
    34                              <1> 
    35                              <1>                 ; rdi  - buf len
    36                              <1>                 ; rsi  - buf pos
    37                              <1>                 ; rbx  - cur symbol
    38                              <1>                 ; r8   - is negative
    39                              <1>                 ; r9   - is after floating point
    40                              <1>                 ; r10  - exp10
    41                              <1>                 ; r11  = 10
    42                              <1>                 ; rax  - number
    43                              <1> 
    44 0000013B 4D31C0              <1>                 xor r8, r8
    45 0000013E 4D31C9              <1>                 xor r9, r9
    46 00000141 4D31D2              <1>                 xor r10, r10
    47 00000144 4831DB              <1>                 xor rbx, rbx
    48 00000147 4831C0              <1>                 xor rax, rax
    49 0000014A 41BB0A000000        <1>                 mov r11, 10
    50                              <1> 
    51 00000150 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    52 00000153 0F83CB000000        <1>                 jae .error
    53                              <1> 
    54 00000159 80BE[40000000]2D    <1>                 cmp byte ReadBuffer[rsi], '-'
    55 00000160 7511                <1>                 jne .isPositive
    56 00000162 41B801000000        <1>                 mov r8, 1
    57 00000168 48FFC6              <1>                 inc rsi
    58 0000016B 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    59                              <1> 
    60                              <1> .isPositive:
    61 00000173 EB0D                <1>                 jmp .whileClause
    62                              <1> .whileBody:
    63 00000175 49F7E3              <1>                 mul r11
    64 00000178 488D43D0            <1>                 lea rax, [rbx - '0']
    65                              <1> 
    66 0000017C 4D01CA              <1>                 add r10, r9 ; inc exp10
    67 0000017F 48FFC6              <1>                 inc rsi
    68                              <1> 
    69                              <1> .whileClause:
    70 00000182 4839FE              <1>                 cmp rsi, rdi ; pos >= len
    71 00000185 7352                <1>                 jae .endBuf
    72                              <1> 
    73 00000187 8A9E[40000000]      <1>                 mov bl, ReadBuffer[rsi] ; bl - cur symbol
    74                              <1> 
    75 0000018D 80FB30              <1>                 cmp bl, '0'
    76 00000190 7207                <1>                 jb .notDigit
    77                              <1> 
    78 00000192 80FB39              <1>                 cmp bl, '9'
    79 00000195 7702                <1>                 ja .notDigit
    80                              <1> 
    81 00000197 EBDC                <1>                 jmp .whileBody
    82                              <1> 
    83                              <1> .notDigit:
    84 00000199 80FB2E              <1>                 cmp bl, '.'
    85 0000019C 7407                <1>                 je .floatingPoint
    86                              <1> 
    87 0000019E 80FB0A              <1>                 cmp bl, 0x0a
    88 000001A1 741A                <1>                 je .endLine
    89                              <1> 
    90 000001A3 EB7F                <1>                 jmp .error
    91                              <1> 
    92                              <1> .floatingPoint:
    93 000001A5 4D85C9              <1>                 test r9, r9
    94 000001A8 757A                <1>                 jne .error ; several floating points in one number
    95                              <1> 
    96 000001AA 41B901000000        <1>                 mov r9, 1
    97 000001B0 48FFC6              <1>                 inc rsi
    98 000001B3 48FF0425[88000000]  <1>                 inc qword [ReadBufferPos] ; is needed for empty input check
    99                              <1> 
   100 000001BB EBC5                <1>                 jmp .whileClause
   101                              <1> 
   102                              <1> .endLine:
   103 000001BD 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   104 000001C5 745D                <1>                 je .error ; empty input
   105                              <1> 
   106 000001C7 48FFC6              <1>                 inc rsi
   107 000001CA 4839FE              <1>                 cmp rsi, rdi
   108 000001CD 740A                <1>                 je .endBuf
   109                              <1> 
   110 000001CF 48893425[88000000]  <1>                 mov qword [ReadBufferPos], rsi
   111 000001D7 EB22                <1>                 jmp .writeAns
   112                              <1> 
   113                              <1> .endBuf:
   114 000001D9 48393425[88000000]  <1>                 cmp [ReadBufferPos], rsi
   115 000001E1 7441                <1>                 je .error ; empty input
   116                              <1> 
   117 000001E3 48C70425[80000000]- <1>                 mov qword [ReadBufferLen], 0
   117 000001EB 00000000            <1>
   118 000001EF 48C70425[88000000]- <1>                 mov qword [ReadBufferPos], 0
   118 000001F7 00000000            <1>
   119                              <1> 
   120                              <1> .writeAns:
   121 000001FB 4D85C0              <1>                 test r8, r8
   122 000001FE 7403                <1>                 je .isPositive2
   123                              <1> 
   124 00000200 48F7D8              <1>                 neg rax
   125                              <1> 
   126                              <1> .isPositive2:
   127 00000203 F2480F2AC0          <1>                 cvtsi2sd xmm0, rax
   128                              <1> 
   129 00000208 B801000000          <1>                 mov rax, 1
   130                              <1> 
   131 0000020D EB06                <1>                 jmp .forExpClause
   132                              <1> .forExpBody:
   133 0000020F 49FFCA              <1>                 dec r10
   134 00000212 49F7E3              <1>                 mul r11
   135                              <1> 
   136                              <1> .forExpClause:
   137 00000215 4D85D2              <1>                 test r10, r10
   138 00000218 75F5                <1>                 jne .forExpBody
   139                              <1> 
   140 0000021A F2480F2AC8          <1>                 cvtsi2sd xmm1, rax
   141                              <1> 
   142 0000021F F20F5EC1            <1>                 divsd xmm0, xmm1
   143                              <1> 
   144 00000223 C3                  <1>                 ret
   145                              <1> 
   146                              <1> .error:
   147 00000224 B801000000          <1>                 mov rax, 0x01           ; sys_write
   148 00000229 BF01000000          <1>                 mov rdi, 0x01           ; stdout
   149 0000022E 488D3425[26000000]  <1>                 lea rsi, [InputError]   ; string
   150 00000236 BA15000000          <1>                 mov rdx, InputErrorLen  ; string len
   151 0000023B 0F05                <1>                 syscall
   152                              <1> 
   153 0000023D B83C000000          <1>                 mov rax, 0x3c           ; exit
   154 00000242 48C7C7FFFFFFFF      <1>                 mov rdi, -1             ; error code
   155 00000249 0F05                <1>                 syscall
   156                              <1> ;-------------------------------------------------
   157                              <1> 
   158                              <1> ;-------------------------------------------------
   159                              <1> ; print double
   160                              <1> ;
   161                              <1> ; Args:     xmm0 - number
   162                              <1> ;
   163                              <1> ; Destr:    rax, rbx, rcx, rdx, rdi, rsi, r11, r12, r13, xmm0, xmm1
   164                              <1> ;-------------------------------------------------
   165                              <1> doubleio_out:
   166                              <1> 
   167 0000024B 4C8D2C25[3F000000]  <1>                 lea r13, [WriteBuffer + BufCapacity - 1]         ; r13 - output str pointer
   168                              <1> 
   169 00000253 41C645000A          <1>                 mov byte [r13], 0x0a ; \n
   170 00000258 49FFCD              <1>                 dec r13
   171                              <1> 
   172 0000025B 66480F7EC3          <1>                 movq rbx, xmm0                              ; rbx - raw xmm0
   173 00000260 4885DB              <1>                 test rbx, rbx
   174 00000263 790C                <1>                 jns .isPositive ; xmm0 >= 0
   175                              <1> 
   176 00000265 F30F7EC8            <1>                 movq xmm1, xmm0
   177 00000269 660FEFC0            <1>                 pxor xmm0, xmm0
   178 0000026D F20F5CC1            <1>                 subsd xmm0, xmm1
   179                              <1> .isPositive:
   180                              <1> 
   181 00000271 F24C0F2CD8          <1>                 cvttsd2si r11, xmm0 ; convert float to int  ; r11 - int part
   182 00000276 F2490F2ACB          <1>                 cvtsi2sd xmm1, r11
   183 0000027B F20F5CC1            <1>                 subsd xmm0, xmm1
   184 0000027F F20F590425-         <1>                 mulsd xmm0, [double_1e6]
   184 00000284 [10000000]          <1>
   185 00000288 F2480F2CC0          <1>                 cvttsd2si rax, xmm0                         ; rax - non-int part
   186                              <1> 
   187                              <1>                 ; convert non-int part
   188 0000028D 41BC0A000000        <1>                 mov r12d, 10    ; base
   189 00000293 B906000000          <1>                 mov rcx, 6      ; width
   190                              <1> .flWhileBody:
   191 00000298 4831D2              <1>                 xor rdx, rdx
   192 0000029B 41F7F4              <1>                 div r12d
   193                              <1>                 ; eax = div
   194                              <1>                 ; edx = mod
   195                              <1> 
   196 0000029E 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   197 000002A4 41885500            <1>                 mov byte [r13], dl
   198 000002A8 49FFCD              <1>                 dec r13
   199 000002AB 48FFC9              <1>                 dec rcx
   200                              <1> 
   201 000002AE 4885C9              <1>                 test rcx,rcx
   202 000002B1 75E5                <1>                 jne .flWhileBody
   203                              <1> 
   204 000002B3 41C645002E          <1>                 mov byte [r13], '.'
   205 000002B8 49FFCD              <1>                 dec r13
   206                              <1> 
   207 000002BB 4C89D8              <1>                 mov rax, r11                                ; rax - int part
   208                              <1> 
   209                              <1>                 ; convert int part
   210                              <1> .intWhileBody:
   211 000002BE 4831D2              <1>                 xor rdx, rdx
   212 000002C1 41F7F4              <1>                 div r12d
   213                              <1>                 ; eax = div
   214                              <1>                 ; edx = mod
   215                              <1> 
   216 000002C4 8A92[00000000]      <1>                 mov dl, HexTable[rdx]
   217 000002CA 41885500            <1>                 mov byte [r13], dl
   218 000002CE 49FFCD              <1>                 dec r13
   219                              <1> 
   220 000002D1 85C0                <1>                 test eax, eax
   221 000002D3 75E9                <1>                 jne .intWhileBody
   222                              <1> 
   223 000002D5 4885DB              <1>                 test rbx, rbx
   224 000002D8 7908                <1>                 jns .isPositive2 ; xmm0 >= 0
   225                              <1> 
   226 000002DA 41C645002D          <1>                 mov byte [r13], '-'
   227 000002DF 49FFCD              <1>                 dec r13
   228                              <1> .isPositive2:
   229                              <1> 
   230 000002E2 49BB-               <1>                 mov r11, WriteBuffer + BufCapacity - 1
   230 000002E4 [3F00000000000000]  <1>
   231 000002EC 4D29EB              <1>                 sub r11, r13
   232                              <1> 
   233 000002EF 49FFC5              <1>                 inc r13
   234                              <1> 
   235 000002F2 B801000000          <1>                 mov rax, 0x01   ; sys_write
   236 000002F7 BF01000000          <1>                 mov rdi, 0x01   ; stdout
   237 000002FC 4C89EE              <1>                 mov rsi, r13    ; buffer
   238 000002FF 4C89DA              <1>                 mov rdx, r11    ; buffer size
   239 00000302 0F05                <1>                 syscall
   240                              <1> 
   241 00000304 C3                  <1>                 ret
   242                              <1> ;-------------------------------------------------
   243                              <1> 
   244                              <1> section .data
   245                              <1> 
   246                              <1> BufCapacity equ 64
   247                              <1> 
   248 00000000 00<rep 40h>         <1> WriteBuffer:   times BufCapacity db 0
   249                              <1> 
   250 00000040 00<rep 40h>         <1> ReadBuffer:     times BufCapacity db 0
   251 00000080 0000000000000000    <1> ReadBufferLen:  dq 0
   252 00000088 0000000000000000    <1> ReadBufferPos:  dq 0
   253                              <1> 
   254                              <1> section .rodata
   255                              <1> 
   256 00000000 303132333435363738- <1> HexTable:       db "0123456789abcdef"
   256 00000009 39616263646566      <1>
   257 00000010 0000000080842E41    <1> double_1e6:     dq 0x412e848000000000
   258                              <1> 
   259 00000018 456E74657220646F75- <1> EnterDoubleStr:     db "Enter double: "
   259 00000021 626C653A20          <1>
   260                              <1> EnterDoubleStrLen   equ $ - EnterDoubleStr
   261                              <1> 
   262 00000026 57726F6E6720696E70- <1> InputError:         db "Wrong input. Exiting", 0x0a
   262 0000002F 75742E204578697469- <1>
   262 00000038 6E670A              <1>
   263                              <1> InputErrorLen       equ $ - InputError
    92                                  
    93                                  section .data
    94                                  
    95                                  GLOBAL_SECTION: times 0 dq 0
    96                                  
    97                                  section .rodata
    98                                  
    99 0000003B 256C670A00              PRINTF_DOUBLE_FMT: db '%', 'l', 'g', 0x0a, 0
   100 00000040 256C6600                SCANF_DOUBLE_FMT:  db '%', 'l', 'f', 0
